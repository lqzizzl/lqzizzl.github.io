<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘强的博客</title>
  <icon>https://www.gravatar.com/avatar/dd49790798d9b05aa9a6471cd2b458c4</icon>
  <subtitle>脚踏实地，仰望星空</subtitle>
  <link href="http://lqzizzl.github.io/atom.xml" rel="self"/>
  
  <link href="http://lqzizzl.github.io/"/>
  <updated>2021-01-15T13:16:56.437Z</updated>
  <id>http://lqzizzl.github.io/</id>
  
  <author>
    <name>E-Dreamer</name>
    <email>lqzizzl@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数字图像处理-第三章</title>
    <link href="http://lqzizzl.github.io/2021/01/04/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <id>http://lqzizzl.github.io/2021/01/04/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%B8%89%E7%AB%A0/</id>
    <published>2021-01-04T01:17:23.000Z</published>
    <updated>2021-01-15T13:16:56.437Z</updated>
    
    <content type="html"><![CDATA[<h3 id="灰度变换和空间滤波基础"><a href="#灰度变换和空间滤波基础" class="headerlink" title="灰度变换和空间滤波基础"></a>灰度变换和空间滤波基础</h3><h4 id="图像增强例子"><a href="#图像增强例子" class="headerlink" title="图像增强例子"></a>图像增强例子</h4><p><a href="https://imgchr.com/i/s0xl26"><img src="https://s3.ax1x.com/2021/01/15/s0xl26.png" alt="s0xl26.png"></a></p><h4 id="基本的灰度变换函数"><a href="#基本的灰度变换函数" class="headerlink" title="基本的灰度变换函数"></a>基本的灰度变换函数</h4><p><a href="https://imgchr.com/i/s0xfGq"><img src="https://s3.ax1x.com/2021/01/15/s0xfGq.png" alt="s0xfGq.png"></a></p><a id="more"></a><h5 id="图像反转"><a href="#图像反转" class="headerlink" title="图像反转"></a>图像反转</h5><p>s = L - 1 - r</p><h5 id="对数变换"><a href="#对数变换" class="headerlink" title="对数变换"></a>对数变换</h5><p>s = c log (1 + r)</p><h5 id="伽马变换-（改变对比度）"><a href="#伽马变换-（改变对比度）" class="headerlink" title="伽马变换 （改变对比度）"></a>伽马变换 （改变对比度）</h5><p>s = c r^y</p><p>改变伽马值不仅会改变亮度，而且会改变彩色图像中红、绿、蓝的比率。</p><p><a href="https://imgchr.com/i/sB9gXV"><img src="https://s3.ax1x.com/2021/01/15/sB9gXV.md.png" alt="sB9gXV.md.png"></a></p><h5 id="分段线性变换"><a href="#分段线性变换" class="headerlink" title="分段线性变换"></a>分段线性变换</h5><h5 id="对比度拉伸"><a href="#对比度拉伸" class="headerlink" title="对比度拉伸"></a>对比度拉伸</h5><p><a href="https://imgchr.com/i/s0xHZ4"><img src="https://s3.ax1x.com/2021/01/15/s0xHZ4.png" alt="s0xHZ4.png"></a></p><h5 id="灰度级分层"><a href="#灰度级分层" class="headerlink" title="灰度级分层"></a>灰度级分层</h5><p><a href="https://imgchr.com/i/s0zZSP"><img src="https://s3.ax1x.com/2021/01/15/s0zZSP.png" alt="s0zZSP.png"></a></p><p>（a)变换产生了一幅二值图像。（b)使感兴趣范围的灰度变亮（或变暗),而保持图像中其他灰度级不变。 </p><h5 id="比特平面分层"><a href="#比特平面分层" class="headerlink" title="比特平面分层"></a>比特平面分层</h5><p>256级灰度图像中，每个像素的灰度是由8比特（1个字节）组成。 一幅8比特图像由8个1比特平面组成，其中平面1包含图像中所有像素的最低阶比特，平面8包含图像中所有像素的最高阶比特。</p><p><a href="https://imgchr.com/i/s0zQoj"><img src="https://s3.ax1x.com/2021/01/15/s0zQoj.png" alt="s0zQoj.png"></a></p><h4 id="直方图处理"><a href="#直方图处理" class="headerlink" title="直方图处理"></a>直方图处理</h4><h5 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h5><p><a href="https://imgchr.com/i/s0z8Wq"><img src="https://s3.ax1x.com/2021/01/15/s0z8Wq.png" alt="s0z8Wq.png"></a></p><p>其中，MN是图像中像素的总数，nk是灰度为rk的像素个数，L是图像中可能的灰度级的数量（即对8比特图像是256），rk相对的p(rk)图形通常称为直方图。 </p><h5 id="直方图均衡"><a href="#直方图均衡" class="headerlink" title="直方图均衡"></a>直方图均衡</h5><p><a href="https://imgchr.com/i/s0z3Yn"><img src="https://s3.ax1x.com/2021/01/15/s0z3Yn.png" alt="s0z3Yn.png"></a></p><p>将输入图像中灰度级为rk的各像素映射到输出图像中灰度级为sk的对应像素。</p><h5 id="直方图均衡说明实例"><a href="#直方图均衡说明实例" class="headerlink" title="直方图均衡说明实例"></a>直方图均衡说明实例</h5><p><img src="https://s3.ax1x.com/2021/01/15/s0zTpt.png" alt="s0zTpt.png"></p><p><a href="https://imgchr.com/i/sBSJNd"><img src="https://s3.ax1x.com/2021/01/15/sBSJNd.png" alt="sBSJNd.png"></a></p><p>图像具有相同内容，直方图均衡导致的对比度增强足以步长图像在视觉上难以区分灰度级的差别。 </p><h5 id="直方图规定化"><a href="#直方图规定化" class="headerlink" title="直方图规定化"></a>直方图规定化</h5><p><a href="https://imgchr.com/i/sBSsEQ"><img src="https://s3.ax1x.com/2021/01/15/sBSsEQ.png" alt="sBSsEQ.png"></a></p><h5 id="直方图规定化过程"><a href="#直方图规定化过程" class="headerlink" title="直方图规定化过程"></a>直方图规定化过程</h5><p><img src="https://s3.ax1x.com/2021/01/15/sBSWvV.png" alt="sBSWvV.png"></p><h5 id="直方图规定化实例"><a href="#直方图规定化实例" class="headerlink" title="直方图规定化实例"></a>直方图规定化实例</h5><p><a href="https://imgchr.com/i/sBS5bF"><img src="https://s3.ax1x.com/2021/01/15/sBS5bF.png" alt="sBS5bF.png"></a></p><h5 id="局部直方图处理"><a href="#局部直方图处理" class="headerlink" title="局部直方图处理"></a>局部直方图处理</h5><p>定义：类似于卷积过程，逐像素移至另一个像素，在每个位置，计算邻域中点的直方图，不采用直方图均衡化而是规定化变换函数。 </p><p>相关参量</p><p>平均灰度——所有像素的灰度值之和/ 图像中的像素总数，平均灰度的度量。 </p><p>灰度方差——[f(x,y)-m]^2/图像中像素总数，图像对比度的度量。 </p><h5 id="计算实例"><a href="#计算实例" class="headerlink" title="计算实例"></a>计算实例</h5><p><img src="https://s3.ax1x.com/2021/01/15/sBpyqO.png" alt="sBpyqO.png"></p><h4 id="空间滤波基础"><a href="#空间滤波基础" class="headerlink" title="空间滤波基础"></a>空间滤波基础</h4><h5 id="滤波过程"><a href="#滤波过程" class="headerlink" title="滤波过程"></a>滤波过程</h5><p><a href="https://imgchr.com/i/sBp2IH"><img src="https://s3.ax1x.com/2021/01/15/sBp2IH.png" alt="sBp2IH.png"></a></p><p>卷积与滤波的区别：滤波是滤波器模板移过每个位置乘积之和的处理，卷积机理类似但是滤波器首先要旋转180度。 </p><p>各种滤波去噪见：<a href="https://www.cnblogs.com/E-Dreamer-Blogs/p/10458846.html">https://www.cnblogs.com/E-Dreamer-Blogs/p/10458846.html</a></p><h5 id="去噪定义"><a href="#去噪定义" class="headerlink" title="去噪定义"></a>去噪定义</h5><p><a href="https://imgchr.com/i/sBpIQP"><img src="https://s3.ax1x.com/2021/01/15/sBpIQP.png" alt="sBpIQP.png"></a></p><p>​        f(x,y)和g(x,y)分别是输入图像和锐化后的图像。如果是拉普拉斯滤波器，则常数为c = -1。如果是线性滤波器和统计排序（非线性）滤波器，则c = 1 。 </p><h5 id="非锐化掩蔽"><a href="#非锐化掩蔽" class="headerlink" title="非锐化掩蔽"></a>非锐化掩蔽</h5><p>（常用于印刷和出版界的图像锐化处理过程）</p><p>1.模糊原图像</p><p>2.从原图像中减去模糊图像（产生的差值图像称为模板） </p><p>3.将模板加到原图像上。 </p><p><a href="https://imgchr.com/i/sBpqoQ"><img src="https://s3.ax1x.com/2021/01/15/sBpqoQ.png" alt="sBpqoQ.png"></a></p><h4 id="使用一阶微分对（非线性）图像锐化——梯度"><a href="#使用一阶微分对（非线性）图像锐化——梯度" class="headerlink" title="使用一阶微分对（非线性）图像锐化——梯度"></a>使用一阶微分对（非线性）图像锐化——梯度</h4><h5 id="使用梯度进行边缘增强实例"><a href="#使用梯度进行边缘增强实例" class="headerlink" title="使用梯度进行边缘增强实例"></a>使用梯度进行边缘增强实例</h5><p><a href="https://imgchr.com/i/sBpzQ0"><img src="https://s3.ax1x.com/2021/01/15/sBpzQ0.png" alt="sBpzQ0.png"></a></p><h4 id="模糊集合应用"><a href="#模糊集合应用" class="headerlink" title="模糊集合应用"></a>模糊集合应用</h4><p><a href="https://imgchr.com/i/sB9pLT"><img src="https://s3.ax1x.com/2021/01/15/sB9pLT.png" alt="sB9pLT.png"></a></p><p><a href="https://imgchr.com/i/sB9QTe"><img src="https://s3.ax1x.com/2021/01/15/sB9QTe.png" alt="sB9QTe.png"></a></p><p><a href="https://imgchr.com/i/sB98fA"><img src="https://s3.ax1x.com/2021/01/15/sB98fA.md.png" alt="sB98fA.md.png"></a>](h</p><p>基于规则的模糊集可以用于灰度变化和空间滤波。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;灰度变换和空间滤波基础&quot;&gt;&lt;a href=&quot;#灰度变换和空间滤波基础&quot; class=&quot;headerlink&quot; title=&quot;灰度变换和空间滤波基础&quot;&gt;&lt;/a&gt;灰度变换和空间滤波基础&lt;/h3&gt;&lt;h4 id=&quot;图像增强例子&quot;&gt;&lt;a href=&quot;#图像增强例子&quot; class=&quot;headerlink&quot; title=&quot;图像增强例子&quot;&gt;&lt;/a&gt;图像增强例子&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/s0xl26&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/15/s0xl26.png&quot; alt=&quot;s0xl26.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;基本的灰度变换函数&quot;&gt;&lt;a href=&quot;#基本的灰度变换函数&quot; class=&quot;headerlink&quot; title=&quot;基本的灰度变换函数&quot;&gt;&lt;/a&gt;基本的灰度变换函数&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/s0xfGq&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/15/s0xfGq.png&quot; alt=&quot;s0xfGq.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="Matlab" scheme="http://lqzizzl.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理-第二章</title>
    <link href="http://lqzizzl.github.io/2020/12/29/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <id>http://lqzizzl.github.io/2020/12/29/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</id>
    <published>2020-12-29T02:09:15.000Z</published>
    <updated>2021-01-15T13:10:20.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第二章-笔记"><a href="#第二章-笔记" class="headerlink" title="第二章 笔记"></a>第二章 笔记</h2><h3 id="图像感知和获取"><a href="#图像感知和获取" class="headerlink" title="图像感知和获取"></a>图像感知和获取</h3><p>将照射能量变换为数字图像的传感器配置。</p><p><a href="https://imgchr.com/i/rjZGqJ"><img src="https://s3.ax1x.com/2020/12/31/rjZGqJ.png" alt="rjZGqJ.png"></a></p><p>原理：通过将输入电能和特殊类型的检测能源敏感的传感器材料组合，将输入能源转变为电压，传感器再将输出电压数字化，得到数字量。 </p><p>单个传感器获取图像——将一个激光源和传感器放在一起，使用镜子来控制扫描模式的发射光束，并将反射的激光信号引导到传感器。</p><p>条带传感器获取图像——传感器的输出必须由重建算法处理，重建算法的目的是把感知数据转化为有意义的剖面图像。（例如核磁共振成像MRI)</p><a id="more"></a><p>传感器阵列获取图像</p><p><a href="https://imgchr.com/i/rjZn5q"><img src="https://s3.ax1x.com/2020/12/31/rjZn5q.png" alt="rjZn5q.png"></a></p><h3 id="图像的取样和量化"><a href="#图像的取样和量化" class="headerlink" title="图像的取样和量化"></a>图像的取样和量化</h3><p>取样——坐标值数字化 ；</p><p>量化——对幅值（灰度级）数字化；</p><p><a href="https://imgchr.com/i/rjZgII"><img src="https://s3.ax1x.com/2020/12/31/rjZgII.png" alt="rjZgII.png"></a></p><h3 id="数字图像表示"><a href="#数字图像表示" class="headerlink" title="数字图像表示"></a>数字图像表示</h3><p><a href="https://imgchr.com/i/rjZLiq"><img src="https://s3.ax1x.com/2020/12/31/rjZLiq.png" alt="rjZLiq.png"></a></p><p>（b,c 表示是最有用的） </p><p>图像的离散灰度级</p><p>​                                                              L = 2^k</p><p>图像系统的动态范围定义为系统中最大可度量灰度级与最小可检测灰度之比。 上限取决于饱和度，下限取决于噪声。 </p><p>对比度——图像中最高和最低灰度级间的灰度差。 </p><p>存储数字图像所需的比特数b为： </p><p>​                                                            b = M * N * k </p><p>空间分辨率——图像中可辨别的最小细节的度量。 </p><p>灰度分辨率——图像中灰度级中可分辨的最小变化。 （一幅被量化为256级的图像有8bit的灰度分辨率） </p><p>图像内插——用已知数据来估计未知位置的数值的处理。 （最近邻内插法、双线性内插法，双三次内插） </p><h3 id="像素间的关系"><a href="#像素间的关系" class="headerlink" title="像素间的关系"></a>像素间的关系</h3><p>相邻像素</p><p>四邻域和八邻域的像素关系</p><p><a href="https://imgchr.com/i/rjZxQU"><img src="https://s3.ax1x.com/2020/12/31/rjZxQU.png" alt="rjZxQU.png"></a></p><p>距离度量——欧式距离、曼哈顿距离、棋盘距离</p><h3 id="几何空间变换和图像配准"><a href="#几何空间变换和图像配准" class="headerlink" title="几何空间变换和图像配准"></a>几何空间变换和图像配准</h3><h5 id="几何变换：（1）坐标的空间变换；-（2）灰度内插，即对空间变换后的像素赋灰度值。"><a href="#几何变换：（1）坐标的空间变换；-（2）灰度内插，即对空间变换后的像素赋灰度值。" class="headerlink" title="几何变换：（1）坐标的空间变换； （2）灰度内插，即对空间变换后的像素赋灰度值。"></a>几何变换：（1）坐标的空间变换； （2）灰度内插，即对空间变换后的像素赋灰度值。</h5><h5 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h5><p><a href="https://imgchr.com/i/rjeSL4"><img src="https://s3.ax1x.com/2020/12/31/rjeSL4.png" alt="rjeSL4.png"></a></p><h5 id="几种坐标映射关系"><a href="#几种坐标映射关系" class="headerlink" title="几种坐标映射关系"></a>几种坐标映射关系</h5><p><a href="https://imgchr.com/i/rje9eJ"><img src="https://s3.ax1x.com/2020/12/31/rje9eJ.png" alt="rje9eJ.png"></a></p><h5 id="图像旋转与灰度内插"><a href="#图像旋转与灰度内插" class="headerlink" title="图像旋转与灰度内插"></a>图像旋转与灰度内插</h5><p>子图像的中间由亮到暗变换所引入的大量垂直块。锯齿边缘效果（最近邻内插&gt;双线性内插&gt;双三次内插）</p><h5 id=""><a href="#" class="headerlink" title=""></a><a href="https://imgchr.com/i/rjeKwd"><img src="https://s3.ax1x.com/2020/12/31/rjeKwd.png" alt="rjeKwd.png"></a></h5><h5 id="图像配准"><a href="#图像配准" class="headerlink" title="图像配准"></a>图像配准</h5><p><strong>关键：估计变换函数</strong></p><p><a href="https://imgchr.com/i/rjelFI"><img src="https://s3.ax1x.com/2020/12/31/rjelFI.png" alt="rjelFI.png"></a></p><p>畸变严重时，使用约束点很难完美的匹配。 </p><h5 id="图像变换"><a href="#图像变换" class="headerlink" title="图像变换"></a>图像变换</h5><p>变换一般操作</p><p><a href="https://imgchr.com/i/rjeY6S"><img src="https://s3.ax1x.com/2020/12/31/rjeY6S.png" alt="rjeY6S.png"></a></p><p>小知识点：变换一般是傅里叶变换，从空间域变换到频域。原因：在空间域下的做卷积相比在频域在乘积操作更加复杂。 </p><h5 id="图像中的概率方法"><a href="#图像中的概率方法" class="headerlink" title="图像中的概率方法"></a>图像中的概率方法</h5><p>概率度量推导灰度变换算法</p><p>使用概率和矩阵公式做图像复原</p><p>概率用于图像分割</p><p>概率描述纹理</p><p>概率导出最佳目标识别技术</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;第二章-笔记&quot;&gt;&lt;a href=&quot;#第二章-笔记&quot; class=&quot;headerlink&quot; title=&quot;第二章 笔记&quot;&gt;&lt;/a&gt;第二章 笔记&lt;/h2&gt;&lt;h3 id=&quot;图像感知和获取&quot;&gt;&lt;a href=&quot;#图像感知和获取&quot; class=&quot;headerlink&quot; title=&quot;图像感知和获取&quot;&gt;&lt;/a&gt;图像感知和获取&lt;/h3&gt;&lt;p&gt;将照射能量变换为数字图像的传感器配置。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/rjZGqJ&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/31/rjZGqJ.png&quot; alt=&quot;rjZGqJ.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原理：通过将输入电能和特殊类型的检测能源敏感的传感器材料组合，将输入能源转变为电压，传感器再将输出电压数字化，得到数字量。 &lt;/p&gt;
&lt;p&gt;单个传感器获取图像——将一个激光源和传感器放在一起，使用镜子来控制扫描模式的发射光束，并将反射的激光信号引导到传感器。&lt;/p&gt;
&lt;p&gt;条带传感器获取图像——传感器的输出必须由重建算法处理，重建算法的目的是把感知数据转化为有意义的剖面图像。（例如核磁共振成像MRI)&lt;/p&gt;</summary>
    
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="Matlab" scheme="http://lqzizzl.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理-第一章</title>
    <link href="http://lqzizzl.github.io/2020/12/28/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <id>http://lqzizzl.github.io/2020/12/28/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%B8%80%E7%AB%A0/</id>
    <published>2020-12-28T01:54:05.000Z</published>
    <updated>2020-12-28T12:58:21.240Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong>：没有做过系统性的学习，如何能对一个领域达到深究的地步。《数字图像处理》——冈萨雷斯版只是零零碎碎的阅读过，未曾做过系统性的通读，故用博客记录，以便后续的巩固和温习，帖子只记录一些个人觉得比较有用的知识。</p><h2 id="第一章-笔记"><a href="#第一章-笔记" class="headerlink" title="第一章  笔记"></a>第一章  笔记</h2><h3 id="数字图像处理领域"><a href="#数字图像处理领域" class="headerlink" title="数字图像处理领域"></a>数字图像处理领域</h3><p>​        各种成像实例：伽马摄像成像、X射线成像、紫外波段成像、可见光及红外波段成像、微波波段成像、无线电波段成像。</p><a id="more"></a><p>超声图像成像步骤</p><p><a href="https://imgchr.com/i/roYCZ9"><img src="https://s3.ax1x.com/2020/12/28/roYCZ9.png" alt="roYCZ9.png"></a></p><h3 id="数字图像处理的基本步骤"><a href="#数字图像处理的基本步骤" class="headerlink" title="数字图像处理的基本步骤"></a>数字图像处理的基本步骤</h3><p><a href="https://imgchr.com/i/roYpqJ"><img src="https://s3.ax1x.com/2020/12/28/roYpqJ.png" alt="roYpqJ.png"></a></p><p>图像获取：图像起源</p><p>图像增强：对一幅图像进行某种操作。 </p><p>图像复原：改进图像外观的处理领域，倾向于图像退化的数学或者概率模型为基础。 </p><p>小波：不同分辨率描述图像的基础。 </p><p>形态学处理：提取图像分量的工具，描述图像形状。 </p><p>分割：将一幅图像划分它的组成部分或者目标。 </p><h3 id="图像处理系统的组成"><a href="#图像处理系统的组成" class="headerlink" title="图像处理系统的组成"></a>图像处理系统的组成</h3><p><a href="https://imgchr.com/i/roYSr4"><img src="https://s3.ax1x.com/2020/12/28/roYSr4.png" alt="roYSr4.png"></a></p><p><strong>趋势</strong>：大型图像处理系统朝着小型化和通用化的小型机并且带有专用图像处理硬件的混合系统的方向发展。 </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;：没有做过系统性的学习，如何能对一个领域达到深究的地步。《数字图像处理》——冈萨雷斯版只是零零碎碎的阅读过，未曾做过系统性的通读，故用博客记录，以便后续的巩固和温习，帖子只记录一些个人觉得比较有用的知识。&lt;/p&gt;
&lt;h2 id=&quot;第一章-笔记&quot;&gt;&lt;a href=&quot;#第一章-笔记&quot; class=&quot;headerlink&quot; title=&quot;第一章  笔记&quot;&gt;&lt;/a&gt;第一章  笔记&lt;/h2&gt;&lt;h3 id=&quot;数字图像处理领域&quot;&gt;&lt;a href=&quot;#数字图像处理领域&quot; class=&quot;headerlink&quot; title=&quot;数字图像处理领域&quot;&gt;&lt;/a&gt;数字图像处理领域&lt;/h3&gt;&lt;p&gt;​        各种成像实例：伽马摄像成像、X射线成像、紫外波段成像、可见光及红外波段成像、微波波段成像、无线电波段成像。&lt;/p&gt;</summary>
    
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="Matlab" scheme="http://lqzizzl.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>八大排序</title>
    <link href="http://lqzizzl.github.io/2020/12/19/%E2%80%98%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E2%80%99/"/>
    <id>http://lqzizzl.github.io/2020/12/19/%E2%80%98%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E2%80%99/</id>
    <published>2020-12-19T03:14:52.000Z</published>
    <updated>2020-12-28T12:59:57.096Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍常用的排序方法——<strong>快速排序，归并排序，堆排序，选择排序，插入排序，冒泡排序，基数排序，桶排序</strong>。</p><p><a href="https://imgchr.com/i/r0LJhR"><img src="https://s3.ax1x.com/2020/12/21/r0LJhR.png" alt="r0LJhR.png"></a></p><a id="more"></a><p> <strong>1.快速排序</strong></p><p><strong>核心：</strong> partition 过程， 一个大于区和一个小于区和一个划分值，最初的划分值为数组的最后一位，小于区指针最初为 l-1，大于区指针为r。 </p><p><strong>逻辑：</strong> 1.当前值小于划分值时， 将小于区的下一位和当前值交换，小于区向右扩一个位置（less++）, 当前值跳下一个位置（l++）。</p><p>　　　 2.当前值大于划分值时， 将大于区的前一位和当前值交换，大于区向左扩一个位置（more–）。</p><p>　　　 3. 当前值等于划分值时，当前值直接跳下一个位置（l++）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">partition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">int</span> less = l - <span class="number">1</span>;<span class="comment">// 向左扩 开始的位置</span></span><br><span class="line">               <span class="keyword">int</span> more = r;</span><br><span class="line">               <span class="keyword">int</span> s;</span><br><span class="line">               <span class="keyword">while</span> (l &lt; more) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (arr1[l] &lt; arr1[r]) &#123;</span><br><span class="line">                              <span class="comment">//该元素小于arr[r]，将之放置在小于区域</span></span><br><span class="line">                              <span class="comment">//放置方法：将该元素与小于区域的右边界的下一个元素（l+1）交换，</span></span><br><span class="line">                              <span class="comment">//然后将l指针与less指针后移 （当前数与小于区域后一个数交换</span></span><br><span class="line">                              ++less;</span><br><span class="line">                              s = arr1[less];  </span><br><span class="line">                              arr1[less] = arr1[l];</span><br><span class="line">                              arr1[l] = s;</span><br><span class="line">                              l++;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr1[l] &gt; arr1[r]) &#123;</span><br><span class="line">                              <span class="comment">//该元素大于arr[r]，将之放置在大于区域</span></span><br><span class="line">                              <span class="comment">//放置方法：将该元素与大于区域的左边界的下一个元素（more-1）交换，</span></span><br><span class="line">                              <span class="comment">//more指针前进，这便完成了大于区域的扩大</span></span><br><span class="line">                              --more;</span><br><span class="line">                              s = arr1[more];</span><br><span class="line">                              arr1[more] = arr1[l];</span><br><span class="line">                              arr1[l] = s;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> &#123;</span><br><span class="line">                              l++;  <span class="comment">//   如果相等就直接 将当前值跳到下一个</span></span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               swap(arr1[more], arr1[r]);</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">               p[<span class="number">0</span>] = less + <span class="number">1</span>;</span><br><span class="line">               p[<span class="number">1</span>] = more;</span><br><span class="line">               <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">SortProcess</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">                       swap(arr1[l + rand() % (r - l)], arr1[r]); <span class="comment">// 随机快排</span></span><br><span class="line">                       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p = partition(arr1, l, r);<span class="comment">//返回的是位置，小于值得右边和大于值得左边</span></span><br><span class="line">                       <span class="comment">//cout&lt;&lt; p.size()&lt;&lt;endl;</span></span><br><span class="line">                       SortProcess(arr1, l, p[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">                       SortProcess(arr1, p[<span class="number">1</span>] + <span class="number">1</span>, r);</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (arr1.empty() == <span class="literal">true</span> || arr1.size() &lt; <span class="number">2</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               SortProcess(arr1, <span class="number">0</span>, arr1.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2.归并排序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (arr.size() == <span class="number">0</span> || arr.size() &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">               SortProcess(arr, <span class="number">0</span>, arr.size()<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//归并排序主体过程</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">SortProcess</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (r == l) <span class="keyword">return</span>; <span class="comment">// 递归停止</span></span><br><span class="line">               <span class="keyword">int</span> mid = l + (r - l)/<span class="number">2</span>;</span><br><span class="line">               SortProcess(arr, l, mid);</span><br><span class="line">               SortProcess(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">               merge(arr, l, mid, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 合并过程</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">helper</span><span class="params">(r - l + <span class="number">1</span>)</span></span>; <span class="comment">// 辅助数组用来存放排序后的数组</span></span><br><span class="line">               <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">               <span class="comment">// 两个指针</span></span><br><span class="line">               <span class="keyword">int</span> p1 = l;</span><br><span class="line">               <span class="keyword">int</span> p2 = mid + <span class="number">1</span>;</span><br><span class="line">               <span class="keyword">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= r) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (arr[p1] &lt; arr[p2]) &#123;</span><br><span class="line">                              helper[i++] = arr[p1++];</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> &#123;</span><br><span class="line">                              helper[i++] = arr[p2++];</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">while</span> (p1 &lt;= mid) &#123;<span class="comment">// 注意这里可以等于</span></span><br><span class="line">                       helper[i++] = arr[p1++];</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">while</span> (p2 &lt;= r) &#123;</span><br><span class="line">                       helper[i++] = arr[p2++];</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 将辅助数组元素位置拷贝会arr</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; helper.size(); i++) &#123;</span><br><span class="line">                       arr[l + i] = helper[i];</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3.堆排序</strong></p><p>核心（这里直接说大根堆）：</p><p>heapinsert() : 将数组元素加入大根堆，即建立大根堆过程。 </p><p>heapify() : 大根堆中有值发生变化，调整大根堆过程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 建立大根堆</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">heapInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; <span class="built_in">array</span>, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">while</span> (<span class="built_in">array</span>[index] &gt; <span class="built_in">array</span>[(index - <span class="number">1</span>) / <span class="number">2</span>]) &#123;</span><br><span class="line">                       swap(<span class="built_in">array</span>[index], <span class="built_in">array</span>[(index - <span class="number">1</span>) / <span class="number">2</span>]);<span class="comment">// (index - 1) / 2 是 根节点， index是儿子</span></span><br><span class="line">                       index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//大跟堆中有值发生变化，调整成依旧是大根堆</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> index, <span class="keyword">int</span> heapsize)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">int</span> left = index * <span class="number">2</span> + <span class="number">1</span>;<span class="comment">//左孩子节点</span></span><br><span class="line">               <span class="keyword">while</span> (left &lt; heapsize) &#123;</span><br><span class="line">                       <span class="keyword">int</span> largest;</span><br><span class="line">                       <span class="keyword">if</span> (left + <span class="number">1</span> &lt; heapsize &amp;&amp; arr[left + <span class="number">1</span>] &gt; arr[left])</span><br><span class="line">                              largest = left + <span class="number">1</span>;  <span class="comment">// 较大的子树</span></span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                              largest = left;</span><br><span class="line">                       <span class="keyword">if</span> (arr[largest] &lt; arr[index]) &#123;</span><br><span class="line">                              largest = index;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">if</span> (largest == index)<span class="comment">// 已经在堆顶了</span></span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                       swap(arr[largest], arr[index]);</span><br><span class="line">                       <span class="comment">//  交换根节点 与 最大儿子 的值，某个孩子比我大，那个孩子的位置就是largest</span></span><br><span class="line">                       index = largest;</span><br><span class="line">                       left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (arr.empty() == <span class="literal">true</span> || arr.size() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">                       heapInsert(arr, i);<span class="comment">//变成大根堆</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">int</span> heaplength = arr.size();</span><br><span class="line">               swap(arr[<span class="number">0</span>], arr[--heaplength]);</span><br><span class="line">               <span class="keyword">while</span> (heaplength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                       heapify(arr, <span class="number">0</span>, heaplength);</span><br><span class="line">                       swap(arr[<span class="number">0</span>], arr[--heaplength]);</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>4.选择排序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size()<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min_index = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ( arr[j] &lt; arr[min_index] ) &#123;</span><br><span class="line">                    min_index = arr[j] &lt; arr[min_index] ? j : min_index;</span><br><span class="line">                &#125;</span><br><span class="line">                swap(arr[j], arr[min_index]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>5.插入排序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (arr.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                                      swap(arr[j], arr[j + <span class="number">1</span>]);</span><br><span class="line">                              &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>6.冒泡排序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123; <span class="comment">//优化版的的冒泡</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">                       <span class="keyword">bool</span> swap_flag = <span class="literal">false</span>;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> j = arr.size()<span class="number">-1</span>; j &gt; i; j--) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (arr[j<span class="number">-1</span>] &gt; arr[j]) &#123;</span><br><span class="line">                                      swap(arr[j], arr[j <span class="number">-1</span>]);</span><br><span class="line">                                      swap_flag = <span class="literal">true</span>;</span><br><span class="line">                              &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">if</span> (!swap_flag) &#123;</span><br><span class="line">                              <span class="keyword">return</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//也可以这样, 大数往后面提</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.size()-i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                                      swap(arr[j], arr[j +<span class="number">1</span> ]);</span><br><span class="line">                              &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>7.基数排序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**求数据的最大位数,决定排序次数*/</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxbit</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">1</span>; <span class="comment">//保存最大的位数</span></span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(data[i] &gt;= p)</span><br><span class="line">            &#123;</span><br><span class="line">                p *= <span class="number">10</span>;</span><br><span class="line">                ++d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">radixsort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> n)</span> <span class="comment">//基数排序</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d = maxbit(data, n);</span><br><span class="line">        <span class="keyword">int</span> tmp[n];</span><br><span class="line">        <span class="keyword">int</span> count[<span class="number">10</span>]; <span class="comment">//计数器</span></span><br><span class="line">        <span class="keyword">int</span> i, j, k;</span><br><span class="line">        <span class="keyword">int</span> radix = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= d; i++) <span class="comment">//进行d次排序</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">                count[j] = <span class="number">0</span>; <span class="comment">//每次分配前清空计数器</span></span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                k = (data[j] / radix) % <span class="number">10</span>; <span class="comment">//统计每个桶中的记录数</span></span><br><span class="line">                count[k]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//计算累加频数，用户计数排序</span></span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">                count[j] = count[j - <span class="number">1</span>] + count[j];</span><br><span class="line">            <span class="keyword">for</span>(j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) <span class="comment">//将所有桶中记录依次收集到tmp中</span></span><br><span class="line">            &#123;</span><br><span class="line">                k = (data[j] / radix) % <span class="number">10</span>;</span><br><span class="line">                tmp[count[k] - <span class="number">1</span>] = data[j]; <span class="comment">//将tmp中的位置依次分配给每个桶</span></span><br><span class="line">                count[k]--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++) <span class="comment">//将临时数组的内容复制到data中</span></span><br><span class="line">                data[j] = tmp[j];</span><br><span class="line">            radix = radix * <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>8.桶排序</strong></p><p>（这里写了python版的，感觉更加简洁）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">假设待排序的一组数统一的分布在一个范围中，并将这一范围划分成几个子范围，也就是桶</span></span><br><span class="line"><span class="string">将待排序的一组数，分档规入这些子桶，并将桶中的数据进行排序</span></span><br><span class="line"><span class="string">将各个桶中的数据有序的合并起来</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bucket_sort</span>(<span class="params">nums,n=<span class="number">3</span></span>):</span></span><br><span class="line">    max_value = <span class="built_in">max</span>(nums)</span><br><span class="line">    min_value = <span class="built_in">min</span>(nums)</span><br><span class="line">    <span class="comment">## 桶的个数</span></span><br><span class="line">    bucket_count = <span class="built_in">int</span>((max_value-min_value)/n) + <span class="number">1</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">### 创建数量为桶个数的空列表</span></span><br><span class="line">    buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(bucket_count)]</span><br><span class="line">     </span><br><span class="line">    <span class="comment">## 将原数组的元素放入到每个桶中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        bucket_index = <span class="built_in">int</span>((i - min_value) // bucket_count)</span><br><span class="line">        buckets[bucket_index].append(i)</span><br><span class="line">    <span class="comment">## 创建返回的排序数组</span></span><br><span class="line">    sort_nums = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets)):</span><br><span class="line">        <span class="comment">##对每个桶中的元素进行排序</span></span><br><span class="line">        buckets[j].sort()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets[j])):</span><br><span class="line">            sort_nums.append(buckets[j][i])</span><br><span class="line">    <span class="keyword">return</span> sort_nums</span><br></pre></td></tr></table></figure><p>总结： <code>重点掌握快排，归并，堆排</code>。 </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍常用的排序方法——&lt;strong&gt;快速排序，归并排序，堆排序，选择排序，插入排序，冒泡排序，基数排序，桶排序&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/r0LJhR&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/21/r0LJhR.png&quot; alt=&quot;r0LJhR.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="编程题" scheme="http://lqzizzl.github.io/categories/%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    
    
    <category term="排序" scheme="http://lqzizzl.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="c++" scheme="http://lqzizzl.github.io/tags/c/"/>
    
  </entry>
  
</feed>
