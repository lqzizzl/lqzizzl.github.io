<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘强的博客</title>
  <icon>https://www.gravatar.com/avatar/dd49790798d9b05aa9a6471cd2b458c4</icon>
  <subtitle>脚踏实地，仰望星空</subtitle>
  <link href="http://lqzizzl.github.io/atom.xml" rel="self"/>
  
  <link href="http://lqzizzl.github.io/"/>
  <updated>2021-02-17T01:18:25.287Z</updated>
  <id>http://lqzizzl.github.io/</id>
  
  <author>
    <name>E-Dreamer</name>
    <email>lqzizzl@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数字图像处理-第六章</title>
    <link href="http://lqzizzl.github.io/2021/02/09/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E5%85%AD%E7%AB%A0/"/>
    <id>http://lqzizzl.github.io/2021/02/09/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E5%85%AD%E7%AB%A0/</id>
    <published>2021-02-09T00:54:08.000Z</published>
    <updated>2021-02-17T01:18:25.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="彩色图像处理"><a href="#彩色图像处理" class="headerlink" title="彩色图像处理"></a>彩色图像处理</h1><h2 id="彩色基础"><a href="#彩色基础" class="headerlink" title="彩色基础"></a>彩色基础</h2><h3 id="一些概念："><a href="#一些概念：" class="headerlink" title="一些概念："></a><strong>一些概念：</strong></h3><p><strong>色调</strong>是光波混个中与主波长有关的属性。色调表示观察者感知的主要颜色。 </p><p><strong>饱和度</strong>是指相对的纯净度，或者一种颜色混合白光的数量，饱和度与所加白光的数量成反比。 </p><p>色调与饱和度一起称为<strong>色度</strong>，颜色可用<strong>亮度和色度</strong>来表征。 </p><a id="more"></a><h3 id="三色值"><a href="#三色值" class="headerlink" title="三色值"></a>三色值</h3><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210209091450663.png" alt="image-20210209091450663"></p><h2 id="彩色模型"><a href="#彩色模型" class="headerlink" title="彩色模型"></a>彩色模型</h2><p>目的： 在某些标准下通常可以接收的方式方便地对彩色加以说明。 </p><p>常用的有：**RGB模型、CMY（青、粉红、黄）、CMYK(青、粉红、黄，黑)、HSI(色、饱和度、亮度)**：可以解除图像中的颜色和灰度信息的联系。 </p><h3 id="RGB模型"><a href="#RGB模型" class="headerlink" title="RGB模型"></a>RGB模型</h3><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210209094230427.png" alt="image-20210209094230427"></p><h3 id="CMY-和-CMYK彩色模型"><a href="#CMY-和-CMYK彩色模型" class="headerlink" title="CMY 和 CMYK彩色模型"></a>CMY 和 CMYK彩色模型</h3><p>RGB到CMY的转换</p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210210145925903.png" alt="image-20210210145925903"></p><p>CMYK 为 在 CMY的基础上加上黑色。 </p><h3 id="HSI彩色模型"><a href="#HSI彩色模型" class="headerlink" title="HSI彩色模型"></a>HSI彩色模型</h3><p>用色调、饱和度、亮度来描述彩色物体。 RGB可以与HSI相互转换。</p><h2 id="伪彩色图像处理"><a href="#伪彩色图像处理" class="headerlink" title="伪彩色图像处理"></a>伪彩色图像处理</h2><p>伪彩色图像处理是基于指定的规则对灰度值赋以颜色的处理。 </p><p>​    <strong>灰度分层：应用实例——使用彩色突出降雨量</strong></p><p>​    <img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210210152824794.png" alt="image-20210210152824794"></p><p>​    <strong>灰度到彩色的转换： 应用实例——突出行李内包含的爆炸物的伪彩色应用。</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210210153116699.png" alt="image-20210210153116699"></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210210153718687.png" alt="image-20210210153718687"></p><h2 id="全彩色图像处理基础"><a href="#全彩色图像处理基础" class="headerlink" title="全彩色图像处理基础"></a>全彩色图像处理基础</h2><p>彩色变换：主要涉及在单一彩色模型内处理彩色图像的分量。</p><p>模型公式： <img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210210154729129.png" alt="image-20210210154729129"></p><h3 id="补色"><a href="#补色" class="headerlink" title="补色"></a>补色</h3><p>输入图像的饱和度分量是不可改变的，造成了 c 、 d 的视觉差别。 </p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210210155010370.png" alt="image-20210210155010370"></p><h3 id="彩色分层"><a href="#彩色分层" class="headerlink" title="彩色分层"></a>彩色分层</h3><p>比灰度分层复杂，所要求的变换比所考虑的彩色分量变换复杂，因为所有彩色分层方法都要求每个像素变换后的彩色分量是所有n个原始像素的彩色分量的函数。 </p><h3 id="色彩和彩色校正"><a href="#色彩和彩色校正" class="headerlink" title="色彩和彩色校正"></a>色彩和彩色校正</h3><p>标准成像系统的意义：允许交互和独立地校正色调和色彩的不平衡，一幅图像的色调范围是指颜色强度的基本分布。 </p><h3 id="色调变换"><a href="#色调变换" class="headerlink" title="色调变换"></a>色调变换</h3><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210216110603214.png" alt="image-20210216110603214"></p><h3 id="直方图处理"><a href="#直方图处理" class="headerlink" title="直方图处理"></a>直方图处理</h3><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210216111651281.png" alt="image-20210216111651281"></p><h2 id="平滑和锐化"><a href="#平滑和锐化" class="headerlink" title="平滑和锐化"></a>平滑和锐化</h2><p>灰度级图像平滑与全彩色图像处理的差别：使用</p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210216111924660.png" alt="image-20210216111924660"></p><p>给出的分量向量来替代灰度标量值。 </p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210216112446035.png" alt="image-20210216112446035"></p><h3 id="彩色图像锐化"><a href="#彩色图像锐化" class="headerlink" title="彩色图像锐化"></a>彩色图像锐化</h3><p>上面c向量的拉普拉色变换为： </p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210216112537962.png" alt="image-20210216112537962"></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210216112505572.png" alt="image-20210216112505572"></p><h2 id="基于彩色图像的图像分割"><a href="#基于彩色图像的图像分割" class="headerlink" title="基于彩色图像的图像分割"></a>基于彩色图像的图像分割</h2><h3 id="HSI空间中的分割实例"><a href="#HSI空间中的分割实例" class="headerlink" title="HSI空间中的分割实例"></a>HSI空间中的分割实例</h3><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210216112638987.png" alt="image-20210216112638987"></p><p>实验表明，在识别原图像的微红色分量时，h的白色区域是最好结果。 </p><h3 id="RGB向量空间中的分割"><a href="#RGB向量空间中的分割" class="headerlink" title="RGB向量空间中的分割"></a>RGB向量空间中的分割</h3><p>分割的目的是将给定图像中的每个RGB像素分类，即在指定的区域内是否有一种颜色，最简单的距离度量为欧式距离。 </p><h2 id="彩色边缘检测"><a href="#彩色边缘检测" class="headerlink" title="彩色边缘检测"></a>彩色边缘检测</h2><p>计算单幅图像的梯度然后用得到的结果形成一幅彩色图像将会导致错误的结果。 </p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210216115123639.png" alt="image-20210216115123639"></p><h2 id="彩色图像的噪声"><a href="#彩色图像的噪声" class="headerlink" title="彩色图像的噪声"></a>彩色图像的噪声</h2><p>将RGB带噪声图像转化为HSI时，一个通道含有噪声，转换出来的图像会携带噪声。 </p><h2 id="彩色图像的压缩"><a href="#彩色图像的压缩" class="headerlink" title="彩色图像的压缩"></a>彩色图像的压缩</h2><p>描述彩色所要求的比特数相比描述灰度级的比特数大3-4倍。 第八章会详细介绍。 </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;彩色图像处理&quot;&gt;&lt;a href=&quot;#彩色图像处理&quot; class=&quot;headerlink&quot; title=&quot;彩色图像处理&quot;&gt;&lt;/a&gt;彩色图像处理&lt;/h1&gt;&lt;h2 id=&quot;彩色基础&quot;&gt;&lt;a href=&quot;#彩色基础&quot; class=&quot;headerlink&quot; title=&quot;彩色基础&quot;&gt;&lt;/a&gt;彩色基础&lt;/h2&gt;&lt;h3 id=&quot;一些概念：&quot;&gt;&lt;a href=&quot;#一些概念：&quot; class=&quot;headerlink&quot; title=&quot;一些概念：&quot;&gt;&lt;/a&gt;&lt;strong&gt;一些概念：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;色调&lt;/strong&gt;是光波混个中与主波长有关的属性。色调表示观察者感知的主要颜色。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;饱和度&lt;/strong&gt;是指相对的纯净度，或者一种颜色混合白光的数量，饱和度与所加白光的数量成反比。 &lt;/p&gt;
&lt;p&gt;色调与饱和度一起称为&lt;strong&gt;色度&lt;/strong&gt;，颜色可用&lt;strong&gt;亮度和色度&lt;/strong&gt;来表征。 &lt;/p&gt;</summary>
    
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="Matlab" scheme="http://lqzizzl.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>使用dash和python创建app示例</title>
    <link href="http://lqzizzl.github.io/2021/02/01/%E4%BD%BF%E7%94%A8dash%E5%92%8Cpython%E5%88%9B%E5%BB%BAapp%E7%A4%BA%E4%BE%8B/"/>
    <id>http://lqzizzl.github.io/2021/02/01/%E4%BD%BF%E7%94%A8dash%E5%92%8Cpython%E5%88%9B%E5%BB%BAapp%E7%A4%BA%E4%BE%8B/</id>
    <published>2021-02-01T02:35:57.000Z</published>
    <updated>2021-02-01T02:50:38.887Z</updated>
    
    <content type="html"><![CDATA[<p>本帖参考： <a href="https://blog.csdn.net/charizard90/article/details/105232590">https://blog.csdn.net/charizard90/article/details/105232590</a></p><p>Dash是一款用来搭建Web应用的Python框架，基于Flask,Plotly,js和React。<br>Dash的官网是<a href="https://dash.plotly.com/%E3%80%82">https://dash.plotly.com/。</a><br>Dash的安装非常简单，直接通过<code>pip install dash</code>就能安装完成。<br>根据官网教程创建一个app.py。</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/img/image-20210201103722438.png" alt="image-20210201103722438"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> dash</span><br><span class="line"><span class="keyword">import</span> dash_core_components <span class="keyword">as</span> dcc</span><br><span class="line"><span class="keyword">import</span> dash_html_components <span class="keyword">as</span> html</span><br><span class="line"></span><br><span class="line">external_stylesheets = [<span class="string">&#x27;https://codepen.io/chriddyp/pen/bWLwgP.css&#x27;</span>]</span><br><span class="line"></span><br><span class="line">app = dash.Dash(__name__, external_stylesheets=external_stylesheets)</span><br><span class="line"></span><br><span class="line">app.layout = html.Div(children=[</span><br><span class="line">    html.H1(children=<span class="string">&#x27;Hello Dash&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    html.Div(children=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Dash: A web application framework for Python.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    dcc.Graph(</span><br><span class="line">        <span class="built_in">id</span>=<span class="string">&#x27;example-graph&#x27;</span>,</span><br><span class="line">        figure=&#123;</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>: [</span><br><span class="line">                &#123;<span class="string">&#x27;x&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;y&#x27;</span>: [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;SF&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;x&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;y&#x27;</span>: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">u&#x27;Montréal&#x27;</span>&#125;,</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&#x27;layout&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Dash Data Visualization&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run_server(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行<code>python app.py</code>。<br>在浏览器中访问<a href="http://127.0.0.1:8050/">http://127.0.0.1:8050</a>，第一个Dash应用就成功创建了。</p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/img/image-20210201104518601.png" alt="image-20210201104518601"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本帖参考： &lt;a href=&quot;https://blog.csdn.net/charizard90/article/details/105232590&quot;&gt;https://blog.csdn.net/charizard90/article/details/105232590&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dash是一款用来搭建Web应用的Python框架，基于Flask,Plotly,js和React。&lt;br&gt;Dash的官网是&lt;a href=&quot;https://dash.plotly.com/%E3%80%82&quot;&gt;https://dash.plotly.com/。&lt;/a&gt;&lt;br&gt;Dash的安装非常简单，直接通过&lt;code&gt;pip install dash&lt;/code&gt;就能安装完成。&lt;br&gt;根据官网教程创建一个app.py。&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="http://lqzizzl.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="技术工具" scheme="http://lqzizzl.github.io/tags/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>PicGO与Typora配置图床使用</title>
    <link href="http://lqzizzl.github.io/2021/01/29/PicGO%E4%B8%8ETypora%E9%85%8D%E7%BD%AE%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://lqzizzl.github.io/2021/01/29/PicGO%E4%B8%8ETypora%E9%85%8D%E7%BD%AE%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-29T01:51:18.000Z</published>
    <updated>2021-01-29T12:46:13.090Z</updated>
    
    <content type="html"><![CDATA[<p> 以往写完博客都是一个一个图像上传，使用Picgo解决了以往typora写博客时图片地址为本地，手机查看或者同步到网易云笔记的时候图片无法显示的问题，由此，把图片上传到远程服务器存储就可以完美解决这个问题。</p><a id="more"></a><h2 id="下载typora最新版"><a href="#下载typora最新版" class="headerlink" title="下载typora最新版"></a>下载typora最新版</h2><blockquote><p>此软件用于撰写markdown文档，新版本支持图片粘贴图片功能<br><a href="https://www.typora.io/#windows">官网下载</a></p></blockquote><h2 id="下载图床工具picgo"><a href="#下载图床工具picgo" class="headerlink" title="下载图床工具picgo"></a>下载图床工具picgo</h2><blockquote><p>所谓图床工具，就是自动把本地图片转换成链接的一款工具，网络上有很多图床工具，就目前使用种类而言，PicGo 算得上一款比较优秀的图床工具。它是一款用 Electron-vue 开发的软件，可以支持微博，七牛云，腾讯云COS，又拍云，GitHub，阿里云OSS，SM.MS，imgur 等8种常用图床，功能强大，简单易用</p></blockquote><p>github：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><h2 id="github创建仓库"><a href="#github创建仓库" class="headerlink" title="github创建仓库"></a>github创建仓库</h2><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image-20210129095731271.png" alt="image-20210129095731271"></p><p>（具体如何在github上创建一个仓库已省略）</p><h2 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h2><h4 id="点击头像右上角的settings"><a href="#点击头像右上角的settings" class="headerlink" title="点击头像右上角的settings"></a>点击头像右上角的settings</h4><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image-20210129100023024.png" alt="image-20210129100023024"></p><h4 id="点击-Developer-settings"><a href="#点击-Developer-settings" class="headerlink" title="点击  Developer settings"></a>点击  Developer settings</h4><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image-20210129100110768.png" alt="image-20210129100110768"></p><h4 id="点击Personal-access-tokens"><a href="#点击Personal-access-tokens" class="headerlink" title="点击Personal access tokens"></a>点击Personal access tokens</h4><p>点击 generate tokens 选项</p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image-20210129100243929.png" alt="image-20210129100243929"></p><p>得到一串tokens 密钥</p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image-20210129100415895.png" alt="image-20210129100415895"></p><p>由此，github端配置完毕。 </p><h2 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h2><h4 id="点击图床配置"><a href="#点击图床配置" class="headerlink" title="点击图床配置"></a>点击图床配置</h4><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image-20210129100933966.png" alt="image-20210129100933966"></p><p>在每个空格处写上相应的配置。 </p><p>上传区处选用 github图床</p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image-20210129101058230.png" alt="image-20210129101058230"></p><p>由此，PicGo的配置也完毕。 </p><h2 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h2><h4 id="文件——偏好设置——图像"><a href="#文件——偏好设置——图像" class="headerlink" title="文件——偏好设置——图像"></a>文件——偏好设置——图像</h4><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image-20210129101217904.png" alt="image-20210129101217904"></p><p>由此， typora设置完毕。 </p><h2 id="上传图像"><a href="#上传图像" class="headerlink" title="上传图像"></a>上传图像</h2><p>格式——图像——上传所有本地图像。 </p><p><strong>可能遇到的问题：</strong> </p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20210129111326941.png" alt="image-20210129111326941"></p><p>上传成功但是不显示图像。 </p><p><strong>解决方法： 修改hosts文件</strong></p><p>复制这一段代码到C:\Windows\System32\drivers\etc下的hosts文件；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># GitHub Start </span><br><span class="line"><span class="number">192.30</span><span class="number">.253</span><span class="number">.112</span> github.com </span><br><span class="line"><span class="number">192.30</span><span class="number">.253</span><span class="number">.119</span> gist.github.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> assets-cdn.github.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> raw.githubusercontent.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> gist.githubusercontent.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> cloud.githubusercontent.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> camo.githubusercontent.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> avatars0.githubusercontent.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> avatars1.githubusercontent.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> avatars2.githubusercontent.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> avatars3.githubusercontent.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> avatars4.githubusercontent.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> avatars5.githubusercontent.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> avatars6.githubusercontent.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> avatars7.githubusercontent.com</span><br><span class="line"><span class="number">151.101</span><span class="number">.184</span><span class="number">.133</span> avatars8.githubusercontent.com</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 以往写完博客都是一个一个图像上传，使用Picgo解决了以往typora写博客时图片地址为本地，手机查看或者同步到网易云笔记的时候图片无法显示的问题，由此，把图片上传到远程服务器存储就可以完美解决这个问题。&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="http://lqzizzl.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="技术工具" scheme="http://lqzizzl.github.io/tags/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理-第五章</title>
    <link href="http://lqzizzl.github.io/2021/01/25/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
    <id>http://lqzizzl.github.io/2021/01/25/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%BA%94%E7%AB%A0/</id>
    <published>2021-01-25T02:38:13.000Z</published>
    <updated>2021-02-08T01:43:21.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图像复原与重建"><a href="#图像复原与重建" class="headerlink" title="图像复原与重建"></a>图像复原与重建</h1><h2 id="图像退化-复原过程模型"><a href="#图像退化-复原过程模型" class="headerlink" title="图像退化/复原过程模型"></a>图像退化/复原过程模型</h2><p><strong>空域退化过程</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210129112410773.png" alt="image-20210129112410773"></p><p><strong>频域退化过程</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210129112433596.png" alt="image-20210129112433596"></p><p><strong>退化与复原基本原理</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210129112514152.png" alt="image-20210129112514152"></p><a id="more"></a><h2 id="噪声模型"><a href="#噪声模型" class="headerlink" title="噪声模型"></a>噪声模型</h2><p><strong>噪声的空间域频率特性</strong></p><p>白噪声——傅里叶谱是常量的噪声。</p><p><strong>一些重要的噪声概率密度函数</strong></p><p>高斯噪声、瑞利噪声、伽马噪声、指数噪声、均匀噪声、椒盐（脉冲）噪声、</p><p><strong>噪声图像及其直方图</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210129113513501.png" alt="image-20210129113513501"></p><p>由脉冲噪声污染的图像的椒盐招生的外观是唯一一种引起退化、视觉上可区分的噪声类型。 </p><p><strong>周期噪声</strong></p><p>​        周期噪声可通过频率域滤波来显著地减少，如果空间域中正弦波的振幅足够强，我们在改图像的谱中将看到图像中每个正弦波的脉冲对。 </p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210129145552926.png" alt="image-20210129145552926"></p><p><strong>只存在噪声的复原——空间滤波</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210131095115516.png" alt="image-20210131095115516"></p><p>均值滤波器： 算术均值滤波器 、几何均值滤波器 、谐波均值滤波器、 逆谐波均值滤波器</p><p><strong>均值滤波器实例</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210131095547478.png" alt="image-20210131095547478"></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210131095639466.png" alt="image-20210131095639466"></p><p>​        总结：算术均值滤波器和几何均值滤波器更加适合于处理高斯或者均匀随机噪声， 逆谐波均值滤波器更适合于处理脉冲噪声。 通过明确噪声是暗噪声还是亮噪声，以便于为Q选择正确的符号。 </p><p><strong>统计排序滤波器</strong></p><p>​        统计排序滤波器是空间域滤波器，空间滤波器的响应基于由该滤波器包围的图像区域中的像素值的顺序，排序结果决定滤波器的响应。 </p><p>主要有：中值滤波器、最大值最小值滤波器、中点滤波器、修正的阿尔法均值滤波器</p><p>中值滤波器和修正的阿尔法滤波器针对脉冲噪声相比算术和几何均值滤波器有更好的作用。 </p><p><strong>自适应滤波器</strong></p><p>​        随机变量最简单的度量是其均值和方差，均值为区域内平均灰度的度量，方差为该区域的对比度的度量。 </p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210131101046878.png" alt="image-20210131101046878"></p><p><strong>自适应中值滤波器</strong></p><p>算法过程： </p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210131101919410.png" alt="image-20210131101919410"></p><p>目的：确定中值滤波器的输出 Zmed 是否是一个脉冲,如果不是脉冲则转到 B,如果是 则扩大窗口尺寸。</p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210131101934499.png" alt="image-20210131101934499"></p><p>其中： </p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210131101955531.png" alt="image-20210131101955531"></p><p>​        算法主要作用：（1）去除椒盐噪声；（2）平滑其他非脉冲噪声；（3）减少诸如物体边界细化或者粗化等失真。 </p><p><strong>自适应中值滤波实例</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210131102745841.png" alt="image-20210131102745841"></p><p>（b)中噪声有被有效消除， 但是导致了图像细节的损失。 </p><h2 id="用频率域滤波消除周期噪声"><a href="#用频率域滤波消除周期噪声" class="headerlink" title="用频率域滤波消除周期噪声"></a>用频率域滤波消除周期噪声</h2><p><strong>带阻滤波器</strong></p><p>应用：在频率域噪声分量的一般位置近似已知的应用中消除噪声。 </p><p><strong>带通滤波器</strong></p><p>带通滤波器帮助屏蔽了噪声模式，简化了噪声分析，与图像内容无关。 </p><p><strong>陷波滤波器</strong></p><p>陷波滤波器阻止事先定义的中心频率的邻域内的频率。 </p><p>由于傅里叶变换的对称性，要获得有效的结果，陷波滤波器必须以关于原点对称的形式出现。 </p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210131103820692.png" alt="image-20210131103820692"></p><p><strong>最佳陷波滤波</strong></p><p>解决多种干扰分量，在滤波可以避免消除太多的图像信息。</p><p><strong>线性、位置不变的退化</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210202103506442.png" alt="image-20210202103506442"></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210202103801471.png" alt="image-20210202103801471"></p><p>以上表明，具有加性噪声的线性空间不变退化系统，可在空间域建模为退化（点扩散）函数与一幅图像的卷积，然后再加上噪声。 </p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210202104005538.png" alt="image-20210202104005538"></p><h2 id="估计退化函数"><a href="#估计退化函数" class="headerlink" title="估计退化函数"></a><strong>估计退化函数</strong></h2><p>​        方法： 观察法、试验法、数学建模法。使用以某种方式估计的退化函数来复原一幅图像的过程，称为盲去卷积过程，因为真正的退化函数很少能完全知晓。 </p><p> <strong>图像观察估计</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210202104735209.png" alt="image-20210202104735209"></p><p><strong>试验估计</strong></p><p>使用相同系统的对一个冲激（小亮点）成像，得到退化的冲激响应。</p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210202104822459.png" alt="image-20210202104822459"></p><p><strong>建模估计</strong></p><p>例：基于大气湍流的物理特性引起的退化模型。 </p><p>例：由于运动引起的图像模糊（含有噪声时，难以复原）</p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210202105046369.png" alt="image-20210202105046369"></p><h2 id="逆滤波"><a href="#逆滤波" class="headerlink" title="逆滤波"></a>逆滤波</h2><p>解决退化函数为0或者非常小的值的问题是一种方法是限制滤波的频率，使其接近0点。</p><p><strong>最小均方误差（维纳）滤波</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210202105932297.png" alt="image-20210202105932297"></p><p><strong>最小均方误差滤波 == 最小二乘误差滤波</strong></p><p>SNR 和 MSE 的定义： </p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210202110115892.png" alt="image-20210202110115892"></p><p><strong>逆滤波和维纳滤波的比较</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210202110210270.png" alt="image-20210202110210270"></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210202110259028.png" alt="image-20210202110259028"></p><p><strong>约束最小二乘方滤波</strong></p><p>​        维纳滤波存在的困难：为退化图像和噪声的功率谱必须是已知的，然而功率比的常数估计并不总是一个合适的解。 </p><p>将图像复原问题简化为简单的矩阵操作。 </p><p><strong>维纳滤波和最小二乘方滤波的比较</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210202111029201.png" alt="image-20210202111029201"></p><p><strong>几何均值滤波</strong></p><p>通过参数构造前面提到过的滤波方法。 </p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210202111249929.png" alt="image-20210202111249929"></p><h2 id="由投影重建图像"><a href="#由投影重建图像" class="headerlink" title="由投影重建图像"></a>由投影重建图像</h2><p>反投影法：沿着射线来的方向将一维信号反投影回去。 </p><p><strong>反投影重建实例</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210205161915941.png" alt="image-20210205161915941"></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210205161705428.png" alt="image-20210205161705428"></p><p>分别使用32个和64个反投影能够得到更精确的重建，视觉上非常接近，而且两者都存在模糊问题。 </p><p><strong>计算机断层（CT)原理</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210205162256557.png" alt="image-20210205162256557"></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210205163121351.png" alt="image-20210205163121351"></p><p>投影和雷登变换</p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210205163630044.png" alt="image-20210205163630044"></p><p>沿着xy 平面中任意一条线的f(x,y)的投影（线积分）的公式为雷登变换。</p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210205163846881.png" alt="image-20210205163846881"></p><p><strong>使用雷登变换得到原型区域的投影实例</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210205164027624.png" alt="image-20210205164027624"></p><p>正弦图——雷登变换 关于p 与 theata的图像。 </p><p>​        CT的关键目的是 从投影得到物体的三维表示。 方法为反投影每一个投影，然后对反投影求和以产生一幅图像（切片），堆积所有的结果图像产生三维物体的再现。 </p><p><strong>傅里叶切片定理（投影切片定理）</strong></p><p>​        模糊问题的重建方法基础——投影的一维傅里叶变换和得到投影区域的二维傅里叶变换关系投影p 的一维傅里叶变换</p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210205165508338.png" alt="image-20210205165508338"></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210205165533888.png" alt="image-20210205165533888"></p><p>（5.11-11)为傅里叶切片定理（投影切片定理）。 </p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210205165729121.png" alt="image-20210205165729121"></p><p><strong>使用平行射线束滤波反投影的重建</strong></p><p>直接得到反投影会生成不可接受的模糊结果，解决方法：在计算反投影之前对投影做简单的滤波。</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20210205170306431.png" alt="image-20210205170306431"></p><p><strong>使用滤波反投影的图像重建实例</strong></p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210205170523292.png" alt="image-20210205170523292"></p><p>傅里叶变换在理论表示和算法开发中扮演了重要角色，其中MATLAB中CT图像处理就是基于FFT的。</p><p><strong>使用扇形射线束滤波反投影的重建</strong></p><p>以卷积为基础推导扇形射线滤波反投影</p><p><img src="https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210208085748003.png" alt="image-20210208085748003"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;图像复原与重建&quot;&gt;&lt;a href=&quot;#图像复原与重建&quot; class=&quot;headerlink&quot; title=&quot;图像复原与重建&quot;&gt;&lt;/a&gt;图像复原与重建&lt;/h1&gt;&lt;h2 id=&quot;图像退化-复原过程模型&quot;&gt;&lt;a href=&quot;#图像退化-复原过程模型&quot; class=&quot;headerlink&quot; title=&quot;图像退化/复原过程模型&quot;&gt;&lt;/a&gt;图像退化/复原过程模型&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;空域退化过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210129112410773.png&quot; alt=&quot;image-20210129112410773&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;频域退化过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210129112433596.png&quot; alt=&quot;image-20210129112433596&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;退化与复原基本原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lqzizzl/Images_repository/master/image_process_5/image-20210129112514152.png&quot; alt=&quot;image-20210129112514152&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="Matlab" scheme="http://lqzizzl.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理-第四章</title>
    <link href="http://lqzizzl.github.io/2021/01/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
    <id>http://lqzizzl.github.io/2021/01/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E5%9B%9B%E7%AB%A0/</id>
    <published>2021-01-17T03:10:43.000Z</published>
    <updated>2021-01-25T00:45:30.021Z</updated>
    
    <content type="html"><![CDATA[<p>频率域滤波</p><p>傅里叶级数</p><p>定义：具有周期T的连续变量t 的周期函数f(t)可以被描述为乘以适当洗漱的正弦和和余弦和。 </p><p><a href="https://imgchr.com/i/sbWxOJ"><img src="https://s3.ax1x.com/2021/01/24/sbWxOJ.md.png" alt="sbWxOJ.md.png"></a></p><p>连续变量函数的傅里叶变换</p><p><a href="https://imgchr.com/i/sbfpwR"><img src="https://s3.ax1x.com/2021/01/24/sbfpwR.png" alt="sbfpwR.png"></a></p><a id="more"></a><p>u为连续变量。 欧拉公式变换后，可以写为： </p><p><a href="https://imgchr.com/i/sbf9T1"><img src="https://s3.ax1x.com/2021/01/24/sbf9T1.png" alt="sbf9T1.png"></a></p><p>傅里叶变换实例</p><p><a href="https://imgchr.com/i/sbfn0A"><img src="https://s3.ax1x.com/2021/01/24/sbfn0A.png" alt="sbfn0A.png"></a></p><p>卷积</p><p><a href="https://imgchr.com/i/sbf3p8"><img src="https://s3.ax1x.com/2021/01/24/sbf3p8.png" alt="sbf3p8.png"></a></p><p>其中，负号表示翻转，t是一个函数滑过另一个函数的位移，而τ是积分假变量。 </p><p><a href="https://imgchr.com/i/sbftmj"><img src="https://s3.ax1x.com/2021/01/24/sbftmj.png" alt="sbftmj.png"></a></p><p>空间域中两个函数的卷积的傅里叶变换等于两个函数的傅里叶变换在频率域中的乘积。 </p><p>取样和取样函数的傅里叶变换</p><p>取样作用：将连续函数转换为离散值序列。 </p><p>模拟取样是用 delta t 单位间隔冲激串作为取样函数去乘以f(t):</p><p><a href="https://imgchr.com/i/sbfr1U"><img src="https://s3.ax1x.com/2021/01/24/sbfr1U.png" alt="sbfr1U.png"></a></p><p><a href="https://imgchr.com/i/sbfdkq"><img src="https://s3.ax1x.com/2021/01/24/sbfdkq.png" alt="sbfdkq.png"></a></p><p>取样函数的傅里叶变换</p><p><a href="https://imgchr.com/i/sbfftx"><img src="https://s3.ax1x.com/2021/01/24/sbfftx.png" alt="sbfftx.png"></a></p><p>取样定理</p><p><a href="https://imgchr.com/i/sbfOAI"><img src="https://s3.ax1x.com/2021/01/24/sbfOAI.png" alt="sbfOAI.png"></a></p><p>以超过函数最高频率的两倍来采样可以还原原函数（香农采样定理）。 </p><p>单变量的离散傅里叶变换（DFT)</p><p><a href="https://imgchr.com/i/sbfz38"><img src="https://s3.ax1x.com/2021/01/24/sbfz38.png" alt="sbfz38.png"></a></p><p><a href="https://imgchr.com/i/sbhnvF"><img src="https://s3.ax1x.com/2021/01/24/sbhnvF.png" alt="sbhnvF.png"></a></p><p>取样和频率间隔间的关系</p><p><a href="https://imgchr.com/i/sbh1ER"><img src="https://s3.ax1x.com/2021/01/24/sbh1ER.png" alt="sbh1ER.png"></a></p><p>两个变量的函数的扩展</p><p>取样特性</p><p><a href="https://imgchr.com/i/sbhwbd"><img src="https://s3.ax1x.com/2021/01/24/sbhwbd.png" alt="sbhwbd.png"></a></p><p>离散冲击的取样特性在该冲激所在位置产生离散函数f(x ,y) 的值。 </p><p>简单函数的二维傅里叶变换实例</p><p><a href="https://imgchr.com/i/sbhDUI"><img src="https://s3.ax1x.com/2021/01/24/sbhDUI.png" alt="sbhDUI.png"></a></p><p>图像中的混淆</p><p>两种混淆现象：</p><p>空间混淆——欠采样造成，主要变现为人为引入缺陷，如线状特征中的锯齿，伪高光。</p><p>时间混淆——图像序列中图像间的时间间隔有关。 </p><p>图像内插与重采样</p><p><a href="https://imgchr.com/i/sbhc28"><img src="https://s3.ax1x.com/2021/01/24/sbhc28.png" alt="sbhc28.png"></a></p><p>当处理具有很强边缘内容的图像时，混淆的影响看起来是块状图像分量，称为锯齿。 </p><p><a href="https://imgchr.com/i/sbhRKg"><img src="https://s3.ax1x.com/2021/01/24/sbhRKg.png" alt="sbhRKg.png"></a></p><p>二维傅里叶反变换</p><p><a href="https://imgchr.com/i/sbh4Vs"><img src="https://s3.ax1x.com/2021/01/24/sbh4Vs.png" alt="sbh4Vs.png"></a></p><p>二维傅里叶变换的一些性质</p><p><a href="https://imgchr.com/i/sbhXqJ"><img src="https://s3.ax1x.com/2021/01/24/sbhXqJ.png" alt="sbhXqJ.png"></a></p><p><a href="https://imgchr.com/i/sb49G6"><img src="https://s3.ax1x.com/2021/01/24/sb49G6.png" alt="sb49G6.png"></a></p><p>频率域滤波基础</p><p>傅里叶变化的频率分量和图像中的亮度变化有关：低频对应图像中变换缓慢的灰度分量，高频对应图像中越来越快的灰度变化。 </p><p>处理频率域滤波器填充的一种方法是构建一个与图像尺寸相同的滤波器，计算该滤波器的IDFT得到相应的空间滤波器，在空间域填充这个空间滤波器，然后计算器DFT返回到频率域。 </p><p>频率域滤波步骤小结</p><p><a href="https://imgchr.com/i/sb4ZdA"><img src="https://s3.ax1x.com/2021/01/24/sb4ZdA.png" alt="sb4ZdA.png"></a></p><p>滤波实例</p><p><a href="https://imgchr.com/i/sb4nit"><img src="https://s3.ax1x.com/2021/01/24/sb4nit.png" alt="sb4nit.png"></a></p><p>空间和频率域滤波间的对应</p><p>空间域和频率域滤波之间的纽带是卷积定理，频率域滤波定义为滤波函数H(u,v)与输入图像的傅里叶变换F(u,v)的乘积。</p><p><a href="https://imgchr.com/i/sb4lQS"><img src="https://s3.ax1x.com/2021/01/24/sb4lQS.png" alt="sb4lQS.png"></a></p><p>使用频率域滤波器平滑图像</p><p>理想低通滤波器 （ILPF)</p><p><a href="https://imgchr.com/i/sb4Niq"><img src="https://s3.ax1x.com/2021/01/24/sb4Niq.png" alt="sb4Niq.png"></a></p><p>使用一个ILPF平滑图像</p><p><a href="https://imgchr.com/i/sb4aWV"><img src="https://s3.ax1x.com/2021/01/24/sb4aWV.png" alt="sb4aWV.png"></a></p><p>n阶巴特沃斯滤波器(BLPF)</p><p><a href="https://imgchr.com/i/sb4dzT"><img src="https://s3.ax1x.com/2021/01/24/sb4dzT.png" alt="sb4dzT.png"></a></p><p>滤波实例</p><p><a href="https://imgchr.com/i/sb46oR"><img src="https://s3.ax1x.com/2021/01/24/sb46oR.png" alt="sb46oR.png"></a></p><p>空间域的一阶巴特沃斯滤波器无振铃现象，随着阶数增高，振铃现象变得明显。 </p><p>高斯滤波器（GLPF)</p><p>无振铃现象，在需要严格控制低频与高频之间截止频率的过渡情况下，BLPF是更加合适的选择。 </p><p>使用频率域滤波器锐化图像（高通滤波） </p><p>理想高通滤波、n阶巴特沃斯高通滤波、高斯高通滤波</p><p>钝化模板、高提升滤波和高频强调滤波</p><p><a href="https://imgchr.com/i/sqNiad"><img src="https://s3.ax1x.com/2021/01/25/sqNiad.png" alt="sqNiad.png"></a></p><p>k=1时，钝化模板；k&gt;1时，高提升滤波器；</p><p>使用高频强调滤波增强图像实例</p><p><a href="https://imgchr.com/i/sqNFIA"><img src="https://s3.ax1x.com/2021/01/25/sqNFIA.png" alt="sqNFIA.png"></a></p><p>同态滤波</p><p><a href="https://imgchr.com/i/sqNAPI"><img src="https://s3.ax1x.com/2021/01/25/sqNAPI.png" alt="sqNAPI.png"></a></p><p>使用同态滤波器可更好地控制照射分量和反射分量，控制有指定滤波器函数H(u,v)影响傅里叶变换的低频和高频分量。 </p><p>选择性滤波</p><p>带阻滤波器和带通滤波器</p><p>陷波滤波器——拒绝事先定义的关于频率矩阵中心的一个邻域的频率，可用中心已被平移到陷波滤波器中心的高通滤波器的乘积来构造。 </p><p>陷波滤波器减少莫尔（波纹）模式实例</p><p><a href="https://imgchr.com/i/sqNEGt"><img src="https://s3.ax1x.com/2021/01/25/sqNEGt.png" alt="sqNEGt.png"></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;频率域滤波&lt;/p&gt;
&lt;p&gt;傅里叶级数&lt;/p&gt;
&lt;p&gt;定义：具有周期T的连续变量t 的周期函数f(t)可以被描述为乘以适当洗漱的正弦和和余弦和。 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/sbWxOJ&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/24/sbWxOJ.md.png&quot; alt=&quot;sbWxOJ.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;连续变量函数的傅里叶变换&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/sbfpwR&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/24/sbfpwR.png&quot; alt=&quot;sbfpwR.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="Matlab" scheme="http://lqzizzl.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理-第三章</title>
    <link href="http://lqzizzl.github.io/2021/01/04/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <id>http://lqzizzl.github.io/2021/01/04/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%B8%89%E7%AB%A0/</id>
    <published>2021-01-04T01:17:23.000Z</published>
    <updated>2021-01-15T13:16:56.437Z</updated>
    
    <content type="html"><![CDATA[<h3 id="灰度变换和空间滤波基础"><a href="#灰度变换和空间滤波基础" class="headerlink" title="灰度变换和空间滤波基础"></a>灰度变换和空间滤波基础</h3><h4 id="图像增强例子"><a href="#图像增强例子" class="headerlink" title="图像增强例子"></a>图像增强例子</h4><p><a href="https://imgchr.com/i/s0xl26"><img src="https://s3.ax1x.com/2021/01/15/s0xl26.png" alt="s0xl26.png"></a></p><h4 id="基本的灰度变换函数"><a href="#基本的灰度变换函数" class="headerlink" title="基本的灰度变换函数"></a>基本的灰度变换函数</h4><p><a href="https://imgchr.com/i/s0xfGq"><img src="https://s3.ax1x.com/2021/01/15/s0xfGq.png" alt="s0xfGq.png"></a></p><a id="more"></a><h5 id="图像反转"><a href="#图像反转" class="headerlink" title="图像反转"></a>图像反转</h5><p>s = L - 1 - r</p><h5 id="对数变换"><a href="#对数变换" class="headerlink" title="对数变换"></a>对数变换</h5><p>s = c log (1 + r)</p><h5 id="伽马变换-（改变对比度）"><a href="#伽马变换-（改变对比度）" class="headerlink" title="伽马变换 （改变对比度）"></a>伽马变换 （改变对比度）</h5><p>s = c r^y</p><p>改变伽马值不仅会改变亮度，而且会改变彩色图像中红、绿、蓝的比率。</p><p><a href="https://imgchr.com/i/sB9gXV"><img src="https://s3.ax1x.com/2021/01/15/sB9gXV.md.png" alt="sB9gXV.md.png"></a></p><h5 id="分段线性变换"><a href="#分段线性变换" class="headerlink" title="分段线性变换"></a>分段线性变换</h5><h5 id="对比度拉伸"><a href="#对比度拉伸" class="headerlink" title="对比度拉伸"></a>对比度拉伸</h5><p><a href="https://imgchr.com/i/s0xHZ4"><img src="https://s3.ax1x.com/2021/01/15/s0xHZ4.png" alt="s0xHZ4.png"></a></p><h5 id="灰度级分层"><a href="#灰度级分层" class="headerlink" title="灰度级分层"></a>灰度级分层</h5><p><a href="https://imgchr.com/i/s0zZSP"><img src="https://s3.ax1x.com/2021/01/15/s0zZSP.png" alt="s0zZSP.png"></a></p><p>（a)变换产生了一幅二值图像。（b)使感兴趣范围的灰度变亮（或变暗),而保持图像中其他灰度级不变。 </p><h5 id="比特平面分层"><a href="#比特平面分层" class="headerlink" title="比特平面分层"></a>比特平面分层</h5><p>256级灰度图像中，每个像素的灰度是由8比特（1个字节）组成。 一幅8比特图像由8个1比特平面组成，其中平面1包含图像中所有像素的最低阶比特，平面8包含图像中所有像素的最高阶比特。</p><p><a href="https://imgchr.com/i/s0zQoj"><img src="https://s3.ax1x.com/2021/01/15/s0zQoj.png" alt="s0zQoj.png"></a></p><h4 id="直方图处理"><a href="#直方图处理" class="headerlink" title="直方图处理"></a>直方图处理</h4><h5 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h5><p><a href="https://imgchr.com/i/s0z8Wq"><img src="https://s3.ax1x.com/2021/01/15/s0z8Wq.png" alt="s0z8Wq.png"></a></p><p>其中，MN是图像中像素的总数，nk是灰度为rk的像素个数，L是图像中可能的灰度级的数量（即对8比特图像是256），rk相对的p(rk)图形通常称为直方图。 </p><h5 id="直方图均衡"><a href="#直方图均衡" class="headerlink" title="直方图均衡"></a>直方图均衡</h5><p><a href="https://imgchr.com/i/s0z3Yn"><img src="https://s3.ax1x.com/2021/01/15/s0z3Yn.png" alt="s0z3Yn.png"></a></p><p>将输入图像中灰度级为rk的各像素映射到输出图像中灰度级为sk的对应像素。</p><h5 id="直方图均衡说明实例"><a href="#直方图均衡说明实例" class="headerlink" title="直方图均衡说明实例"></a>直方图均衡说明实例</h5><p><img src="https://s3.ax1x.com/2021/01/15/s0zTpt.png" alt="s0zTpt.png"></p><p><a href="https://imgchr.com/i/sBSJNd"><img src="https://s3.ax1x.com/2021/01/15/sBSJNd.png" alt="sBSJNd.png"></a></p><p>图像具有相同内容，直方图均衡导致的对比度增强足以步长图像在视觉上难以区分灰度级的差别。 </p><h5 id="直方图规定化"><a href="#直方图规定化" class="headerlink" title="直方图规定化"></a>直方图规定化</h5><p><a href="https://imgchr.com/i/sBSsEQ"><img src="https://s3.ax1x.com/2021/01/15/sBSsEQ.png" alt="sBSsEQ.png"></a></p><h5 id="直方图规定化过程"><a href="#直方图规定化过程" class="headerlink" title="直方图规定化过程"></a>直方图规定化过程</h5><p><img src="https://s3.ax1x.com/2021/01/15/sBSWvV.png" alt="sBSWvV.png"></p><h5 id="直方图规定化实例"><a href="#直方图规定化实例" class="headerlink" title="直方图规定化实例"></a>直方图规定化实例</h5><p><a href="https://imgchr.com/i/sBS5bF"><img src="https://s3.ax1x.com/2021/01/15/sBS5bF.png" alt="sBS5bF.png"></a></p><h5 id="局部直方图处理"><a href="#局部直方图处理" class="headerlink" title="局部直方图处理"></a>局部直方图处理</h5><p>定义：类似于卷积过程，逐像素移至另一个像素，在每个位置，计算邻域中点的直方图，不采用直方图均衡化而是规定化变换函数。 </p><p>相关参量</p><p>平均灰度——所有像素的灰度值之和/ 图像中的像素总数，平均灰度的度量。 </p><p>灰度方差——[f(x,y)-m]^2/图像中像素总数，图像对比度的度量。 </p><h5 id="计算实例"><a href="#计算实例" class="headerlink" title="计算实例"></a>计算实例</h5><p><img src="https://s3.ax1x.com/2021/01/15/sBpyqO.png" alt="sBpyqO.png"></p><h4 id="空间滤波基础"><a href="#空间滤波基础" class="headerlink" title="空间滤波基础"></a>空间滤波基础</h4><h5 id="滤波过程"><a href="#滤波过程" class="headerlink" title="滤波过程"></a>滤波过程</h5><p><a href="https://imgchr.com/i/sBp2IH"><img src="https://s3.ax1x.com/2021/01/15/sBp2IH.png" alt="sBp2IH.png"></a></p><p>卷积与滤波的区别：滤波是滤波器模板移过每个位置乘积之和的处理，卷积机理类似但是滤波器首先要旋转180度。 </p><p>各种滤波去噪见：<a href="https://www.cnblogs.com/E-Dreamer-Blogs/p/10458846.html">https://www.cnblogs.com/E-Dreamer-Blogs/p/10458846.html</a></p><h5 id="去噪定义"><a href="#去噪定义" class="headerlink" title="去噪定义"></a>去噪定义</h5><p><a href="https://imgchr.com/i/sBpIQP"><img src="https://s3.ax1x.com/2021/01/15/sBpIQP.png" alt="sBpIQP.png"></a></p><p>​        f(x,y)和g(x,y)分别是输入图像和锐化后的图像。如果是拉普拉斯滤波器，则常数为c = -1。如果是线性滤波器和统计排序（非线性）滤波器，则c = 1 。 </p><h5 id="非锐化掩蔽"><a href="#非锐化掩蔽" class="headerlink" title="非锐化掩蔽"></a>非锐化掩蔽</h5><p>（常用于印刷和出版界的图像锐化处理过程）</p><p>1.模糊原图像</p><p>2.从原图像中减去模糊图像（产生的差值图像称为模板） </p><p>3.将模板加到原图像上。 </p><p><a href="https://imgchr.com/i/sBpqoQ"><img src="https://s3.ax1x.com/2021/01/15/sBpqoQ.png" alt="sBpqoQ.png"></a></p><h4 id="使用一阶微分对（非线性）图像锐化——梯度"><a href="#使用一阶微分对（非线性）图像锐化——梯度" class="headerlink" title="使用一阶微分对（非线性）图像锐化——梯度"></a>使用一阶微分对（非线性）图像锐化——梯度</h4><h5 id="使用梯度进行边缘增强实例"><a href="#使用梯度进行边缘增强实例" class="headerlink" title="使用梯度进行边缘增强实例"></a>使用梯度进行边缘增强实例</h5><p><a href="https://imgchr.com/i/sBpzQ0"><img src="https://s3.ax1x.com/2021/01/15/sBpzQ0.png" alt="sBpzQ0.png"></a></p><h4 id="模糊集合应用"><a href="#模糊集合应用" class="headerlink" title="模糊集合应用"></a>模糊集合应用</h4><p><a href="https://imgchr.com/i/sB9pLT"><img src="https://s3.ax1x.com/2021/01/15/sB9pLT.png" alt="sB9pLT.png"></a></p><p><a href="https://imgchr.com/i/sB9QTe"><img src="https://s3.ax1x.com/2021/01/15/sB9QTe.png" alt="sB9QTe.png"></a></p><p><a href="https://imgchr.com/i/sB98fA"><img src="https://s3.ax1x.com/2021/01/15/sB98fA.md.png" alt="sB98fA.md.png"></a>](h</p><p>基于规则的模糊集可以用于灰度变化和空间滤波。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;灰度变换和空间滤波基础&quot;&gt;&lt;a href=&quot;#灰度变换和空间滤波基础&quot; class=&quot;headerlink&quot; title=&quot;灰度变换和空间滤波基础&quot;&gt;&lt;/a&gt;灰度变换和空间滤波基础&lt;/h3&gt;&lt;h4 id=&quot;图像增强例子&quot;&gt;&lt;a href=&quot;#图像增强例子&quot; class=&quot;headerlink&quot; title=&quot;图像增强例子&quot;&gt;&lt;/a&gt;图像增强例子&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/s0xl26&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/15/s0xl26.png&quot; alt=&quot;s0xl26.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;基本的灰度变换函数&quot;&gt;&lt;a href=&quot;#基本的灰度变换函数&quot; class=&quot;headerlink&quot; title=&quot;基本的灰度变换函数&quot;&gt;&lt;/a&gt;基本的灰度变换函数&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/s0xfGq&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/15/s0xfGq.png&quot; alt=&quot;s0xfGq.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="Matlab" scheme="http://lqzizzl.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理-第二章</title>
    <link href="http://lqzizzl.github.io/2020/12/29/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <id>http://lqzizzl.github.io/2020/12/29/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</id>
    <published>2020-12-29T02:09:15.000Z</published>
    <updated>2021-01-15T13:10:20.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第二章-笔记"><a href="#第二章-笔记" class="headerlink" title="第二章 笔记"></a>第二章 笔记</h2><h3 id="图像感知和获取"><a href="#图像感知和获取" class="headerlink" title="图像感知和获取"></a>图像感知和获取</h3><p>将照射能量变换为数字图像的传感器配置。</p><p><a href="https://imgchr.com/i/rjZGqJ"><img src="https://s3.ax1x.com/2020/12/31/rjZGqJ.png" alt="rjZGqJ.png"></a></p><p>原理：通过将输入电能和特殊类型的检测能源敏感的传感器材料组合，将输入能源转变为电压，传感器再将输出电压数字化，得到数字量。 </p><p>单个传感器获取图像——将一个激光源和传感器放在一起，使用镜子来控制扫描模式的发射光束，并将反射的激光信号引导到传感器。</p><p>条带传感器获取图像——传感器的输出必须由重建算法处理，重建算法的目的是把感知数据转化为有意义的剖面图像。（例如核磁共振成像MRI)</p><a id="more"></a><p>传感器阵列获取图像</p><p><a href="https://imgchr.com/i/rjZn5q"><img src="https://s3.ax1x.com/2020/12/31/rjZn5q.png" alt="rjZn5q.png"></a></p><h3 id="图像的取样和量化"><a href="#图像的取样和量化" class="headerlink" title="图像的取样和量化"></a>图像的取样和量化</h3><p>取样——坐标值数字化 ；</p><p>量化——对幅值（灰度级）数字化；</p><p><a href="https://imgchr.com/i/rjZgII"><img src="https://s3.ax1x.com/2020/12/31/rjZgII.png" alt="rjZgII.png"></a></p><h3 id="数字图像表示"><a href="#数字图像表示" class="headerlink" title="数字图像表示"></a>数字图像表示</h3><p><a href="https://imgchr.com/i/rjZLiq"><img src="https://s3.ax1x.com/2020/12/31/rjZLiq.png" alt="rjZLiq.png"></a></p><p>（b,c 表示是最有用的） </p><p>图像的离散灰度级</p><p>​                                                              L = 2^k</p><p>图像系统的动态范围定义为系统中最大可度量灰度级与最小可检测灰度之比。 上限取决于饱和度，下限取决于噪声。 </p><p>对比度——图像中最高和最低灰度级间的灰度差。 </p><p>存储数字图像所需的比特数b为： </p><p>​                                                            b = M * N * k </p><p>空间分辨率——图像中可辨别的最小细节的度量。 </p><p>灰度分辨率——图像中灰度级中可分辨的最小变化。 （一幅被量化为256级的图像有8bit的灰度分辨率） </p><p>图像内插——用已知数据来估计未知位置的数值的处理。 （最近邻内插法、双线性内插法，双三次内插） </p><h3 id="像素间的关系"><a href="#像素间的关系" class="headerlink" title="像素间的关系"></a>像素间的关系</h3><p>相邻像素</p><p>四邻域和八邻域的像素关系</p><p><a href="https://imgchr.com/i/rjZxQU"><img src="https://s3.ax1x.com/2020/12/31/rjZxQU.png" alt="rjZxQU.png"></a></p><p>距离度量——欧式距离、曼哈顿距离、棋盘距离</p><h3 id="几何空间变换和图像配准"><a href="#几何空间变换和图像配准" class="headerlink" title="几何空间变换和图像配准"></a>几何空间变换和图像配准</h3><h5 id="几何变换：（1）坐标的空间变换；-（2）灰度内插，即对空间变换后的像素赋灰度值。"><a href="#几何变换：（1）坐标的空间变换；-（2）灰度内插，即对空间变换后的像素赋灰度值。" class="headerlink" title="几何变换：（1）坐标的空间变换； （2）灰度内插，即对空间变换后的像素赋灰度值。"></a>几何变换：（1）坐标的空间变换； （2）灰度内插，即对空间变换后的像素赋灰度值。</h5><h5 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h5><p><a href="https://imgchr.com/i/rjeSL4"><img src="https://s3.ax1x.com/2020/12/31/rjeSL4.png" alt="rjeSL4.png"></a></p><h5 id="几种坐标映射关系"><a href="#几种坐标映射关系" class="headerlink" title="几种坐标映射关系"></a>几种坐标映射关系</h5><p><a href="https://imgchr.com/i/rje9eJ"><img src="https://s3.ax1x.com/2020/12/31/rje9eJ.png" alt="rje9eJ.png"></a></p><h5 id="图像旋转与灰度内插"><a href="#图像旋转与灰度内插" class="headerlink" title="图像旋转与灰度内插"></a>图像旋转与灰度内插</h5><p>子图像的中间由亮到暗变换所引入的大量垂直块。锯齿边缘效果（最近邻内插&gt;双线性内插&gt;双三次内插）</p><h5 id=""><a href="#" class="headerlink" title=""></a><a href="https://imgchr.com/i/rjeKwd"><img src="https://s3.ax1x.com/2020/12/31/rjeKwd.png" alt="rjeKwd.png"></a></h5><h5 id="图像配准"><a href="#图像配准" class="headerlink" title="图像配准"></a>图像配准</h5><p><strong>关键：估计变换函数</strong></p><p><a href="https://imgchr.com/i/rjelFI"><img src="https://s3.ax1x.com/2020/12/31/rjelFI.png" alt="rjelFI.png"></a></p><p>畸变严重时，使用约束点很难完美的匹配。 </p><h5 id="图像变换"><a href="#图像变换" class="headerlink" title="图像变换"></a>图像变换</h5><p>变换一般操作</p><p><a href="https://imgchr.com/i/rjeY6S"><img src="https://s3.ax1x.com/2020/12/31/rjeY6S.png" alt="rjeY6S.png"></a></p><p>小知识点：变换一般是傅里叶变换，从空间域变换到频域。原因：在空间域下的做卷积相比在频域在乘积操作更加复杂。 </p><h5 id="图像中的概率方法"><a href="#图像中的概率方法" class="headerlink" title="图像中的概率方法"></a>图像中的概率方法</h5><p>概率度量推导灰度变换算法</p><p>使用概率和矩阵公式做图像复原</p><p>概率用于图像分割</p><p>概率描述纹理</p><p>概率导出最佳目标识别技术</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;第二章-笔记&quot;&gt;&lt;a href=&quot;#第二章-笔记&quot; class=&quot;headerlink&quot; title=&quot;第二章 笔记&quot;&gt;&lt;/a&gt;第二章 笔记&lt;/h2&gt;&lt;h3 id=&quot;图像感知和获取&quot;&gt;&lt;a href=&quot;#图像感知和获取&quot; class=&quot;headerlink&quot; title=&quot;图像感知和获取&quot;&gt;&lt;/a&gt;图像感知和获取&lt;/h3&gt;&lt;p&gt;将照射能量变换为数字图像的传感器配置。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/rjZGqJ&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/31/rjZGqJ.png&quot; alt=&quot;rjZGqJ.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原理：通过将输入电能和特殊类型的检测能源敏感的传感器材料组合，将输入能源转变为电压，传感器再将输出电压数字化，得到数字量。 &lt;/p&gt;
&lt;p&gt;单个传感器获取图像——将一个激光源和传感器放在一起，使用镜子来控制扫描模式的发射光束，并将反射的激光信号引导到传感器。&lt;/p&gt;
&lt;p&gt;条带传感器获取图像——传感器的输出必须由重建算法处理，重建算法的目的是把感知数据转化为有意义的剖面图像。（例如核磁共振成像MRI)&lt;/p&gt;</summary>
    
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="Matlab" scheme="http://lqzizzl.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理-第一章</title>
    <link href="http://lqzizzl.github.io/2020/12/28/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <id>http://lqzizzl.github.io/2020/12/28/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%B8%80%E7%AB%A0/</id>
    <published>2020-12-28T01:54:05.000Z</published>
    <updated>2020-12-28T12:58:21.240Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong>：没有做过系统性的学习，如何能对一个领域达到深究的地步。《数字图像处理》——冈萨雷斯版只是零零碎碎的阅读过，未曾做过系统性的通读，故用博客记录，以便后续的巩固和温习，帖子只记录一些个人觉得比较有用的知识。</p><h2 id="第一章-笔记"><a href="#第一章-笔记" class="headerlink" title="第一章  笔记"></a>第一章  笔记</h2><h3 id="数字图像处理领域"><a href="#数字图像处理领域" class="headerlink" title="数字图像处理领域"></a>数字图像处理领域</h3><p>​        各种成像实例：伽马摄像成像、X射线成像、紫外波段成像、可见光及红外波段成像、微波波段成像、无线电波段成像。</p><a id="more"></a><p>超声图像成像步骤</p><p><a href="https://imgchr.com/i/roYCZ9"><img src="https://s3.ax1x.com/2020/12/28/roYCZ9.png" alt="roYCZ9.png"></a></p><h3 id="数字图像处理的基本步骤"><a href="#数字图像处理的基本步骤" class="headerlink" title="数字图像处理的基本步骤"></a>数字图像处理的基本步骤</h3><p><a href="https://imgchr.com/i/roYpqJ"><img src="https://s3.ax1x.com/2020/12/28/roYpqJ.png" alt="roYpqJ.png"></a></p><p>图像获取：图像起源</p><p>图像增强：对一幅图像进行某种操作。 </p><p>图像复原：改进图像外观的处理领域，倾向于图像退化的数学或者概率模型为基础。 </p><p>小波：不同分辨率描述图像的基础。 </p><p>形态学处理：提取图像分量的工具，描述图像形状。 </p><p>分割：将一幅图像划分它的组成部分或者目标。 </p><h3 id="图像处理系统的组成"><a href="#图像处理系统的组成" class="headerlink" title="图像处理系统的组成"></a>图像处理系统的组成</h3><p><a href="https://imgchr.com/i/roYSr4"><img src="https://s3.ax1x.com/2020/12/28/roYSr4.png" alt="roYSr4.png"></a></p><p><strong>趋势</strong>：大型图像处理系统朝着小型化和通用化的小型机并且带有专用图像处理硬件的混合系统的方向发展。 </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;：没有做过系统性的学习，如何能对一个领域达到深究的地步。《数字图像处理》——冈萨雷斯版只是零零碎碎的阅读过，未曾做过系统性的通读，故用博客记录，以便后续的巩固和温习，帖子只记录一些个人觉得比较有用的知识。&lt;/p&gt;
&lt;h2 id=&quot;第一章-笔记&quot;&gt;&lt;a href=&quot;#第一章-笔记&quot; class=&quot;headerlink&quot; title=&quot;第一章  笔记&quot;&gt;&lt;/a&gt;第一章  笔记&lt;/h2&gt;&lt;h3 id=&quot;数字图像处理领域&quot;&gt;&lt;a href=&quot;#数字图像处理领域&quot; class=&quot;headerlink&quot; title=&quot;数字图像处理领域&quot;&gt;&lt;/a&gt;数字图像处理领域&lt;/h3&gt;&lt;p&gt;​        各种成像实例：伽马摄像成像、X射线成像、紫外波段成像、可见光及红外波段成像、微波波段成像、无线电波段成像。&lt;/p&gt;</summary>
    
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="图像处理" scheme="http://lqzizzl.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="Matlab" scheme="http://lqzizzl.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>八大排序</title>
    <link href="http://lqzizzl.github.io/2020/12/19/%E2%80%98%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E2%80%99/"/>
    <id>http://lqzizzl.github.io/2020/12/19/%E2%80%98%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E2%80%99/</id>
    <published>2020-12-19T03:14:52.000Z</published>
    <updated>2020-12-28T12:59:57.096Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍常用的排序方法——<strong>快速排序，归并排序，堆排序，选择排序，插入排序，冒泡排序，基数排序，桶排序</strong>。</p><p><a href="https://imgchr.com/i/r0LJhR"><img src="https://s3.ax1x.com/2020/12/21/r0LJhR.png" alt="r0LJhR.png"></a></p><a id="more"></a><p> <strong>1.快速排序</strong></p><p><strong>核心：</strong> partition 过程， 一个大于区和一个小于区和一个划分值，最初的划分值为数组的最后一位，小于区指针最初为 l-1，大于区指针为r。 </p><p><strong>逻辑：</strong> 1.当前值小于划分值时， 将小于区的下一位和当前值交换，小于区向右扩一个位置（less++）, 当前值跳下一个位置（l++）。</p><p>　　　 2.当前值大于划分值时， 将大于区的前一位和当前值交换，大于区向左扩一个位置（more–）。</p><p>　　　 3. 当前值等于划分值时，当前值直接跳下一个位置（l++）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">partition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">int</span> less = l - <span class="number">1</span>;<span class="comment">// 向左扩 开始的位置</span></span><br><span class="line">               <span class="keyword">int</span> more = r;</span><br><span class="line">               <span class="keyword">int</span> s;</span><br><span class="line">               <span class="keyword">while</span> (l &lt; more) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (arr1[l] &lt; arr1[r]) &#123;</span><br><span class="line">                              <span class="comment">//该元素小于arr[r]，将之放置在小于区域</span></span><br><span class="line">                              <span class="comment">//放置方法：将该元素与小于区域的右边界的下一个元素（l+1）交换，</span></span><br><span class="line">                              <span class="comment">//然后将l指针与less指针后移 （当前数与小于区域后一个数交换</span></span><br><span class="line">                              ++less;</span><br><span class="line">                              s = arr1[less];  </span><br><span class="line">                              arr1[less] = arr1[l];</span><br><span class="line">                              arr1[l] = s;</span><br><span class="line">                              l++;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr1[l] &gt; arr1[r]) &#123;</span><br><span class="line">                              <span class="comment">//该元素大于arr[r]，将之放置在大于区域</span></span><br><span class="line">                              <span class="comment">//放置方法：将该元素与大于区域的左边界的下一个元素（more-1）交换，</span></span><br><span class="line">                              <span class="comment">//more指针前进，这便完成了大于区域的扩大</span></span><br><span class="line">                              --more;</span><br><span class="line">                              s = arr1[more];</span><br><span class="line">                              arr1[more] = arr1[l];</span><br><span class="line">                              arr1[l] = s;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> &#123;</span><br><span class="line">                              l++;  <span class="comment">//   如果相等就直接 将当前值跳到下一个</span></span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               swap(arr1[more], arr1[r]);</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">               p[<span class="number">0</span>] = less + <span class="number">1</span>;</span><br><span class="line">               p[<span class="number">1</span>] = more;</span><br><span class="line">               <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">SortProcess</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">                       swap(arr1[l + rand() % (r - l)], arr1[r]); <span class="comment">// 随机快排</span></span><br><span class="line">                       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p = partition(arr1, l, r);<span class="comment">//返回的是位置，小于值得右边和大于值得左边</span></span><br><span class="line">                       <span class="comment">//cout&lt;&lt; p.size()&lt;&lt;endl;</span></span><br><span class="line">                       SortProcess(arr1, l, p[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">                       SortProcess(arr1, p[<span class="number">1</span>] + <span class="number">1</span>, r);</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (arr1.empty() == <span class="literal">true</span> || arr1.size() &lt; <span class="number">2</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               SortProcess(arr1, <span class="number">0</span>, arr1.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2.归并排序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (arr.size() == <span class="number">0</span> || arr.size() &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">               SortProcess(arr, <span class="number">0</span>, arr.size()<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//归并排序主体过程</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">SortProcess</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (r == l) <span class="keyword">return</span>; <span class="comment">// 递归停止</span></span><br><span class="line">               <span class="keyword">int</span> mid = l + (r - l)/<span class="number">2</span>;</span><br><span class="line">               SortProcess(arr, l, mid);</span><br><span class="line">               SortProcess(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">               merge(arr, l, mid, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 合并过程</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">helper</span><span class="params">(r - l + <span class="number">1</span>)</span></span>; <span class="comment">// 辅助数组用来存放排序后的数组</span></span><br><span class="line">               <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">               <span class="comment">// 两个指针</span></span><br><span class="line">               <span class="keyword">int</span> p1 = l;</span><br><span class="line">               <span class="keyword">int</span> p2 = mid + <span class="number">1</span>;</span><br><span class="line">               <span class="keyword">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= r) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (arr[p1] &lt; arr[p2]) &#123;</span><br><span class="line">                              helper[i++] = arr[p1++];</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> &#123;</span><br><span class="line">                              helper[i++] = arr[p2++];</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">while</span> (p1 &lt;= mid) &#123;<span class="comment">// 注意这里可以等于</span></span><br><span class="line">                       helper[i++] = arr[p1++];</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">while</span> (p2 &lt;= r) &#123;</span><br><span class="line">                       helper[i++] = arr[p2++];</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 将辅助数组元素位置拷贝会arr</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; helper.size(); i++) &#123;</span><br><span class="line">                       arr[l + i] = helper[i];</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3.堆排序</strong></p><p>核心（这里直接说大根堆）：</p><p>heapinsert() : 将数组元素加入大根堆，即建立大根堆过程。 </p><p>heapify() : 大根堆中有值发生变化，调整大根堆过程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 建立大根堆</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">heapInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; <span class="built_in">array</span>, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">while</span> (<span class="built_in">array</span>[index] &gt; <span class="built_in">array</span>[(index - <span class="number">1</span>) / <span class="number">2</span>]) &#123;</span><br><span class="line">                       swap(<span class="built_in">array</span>[index], <span class="built_in">array</span>[(index - <span class="number">1</span>) / <span class="number">2</span>]);<span class="comment">// (index - 1) / 2 是 根节点， index是儿子</span></span><br><span class="line">                       index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//大跟堆中有值发生变化，调整成依旧是大根堆</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> index, <span class="keyword">int</span> heapsize)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">int</span> left = index * <span class="number">2</span> + <span class="number">1</span>;<span class="comment">//左孩子节点</span></span><br><span class="line">               <span class="keyword">while</span> (left &lt; heapsize) &#123;</span><br><span class="line">                       <span class="keyword">int</span> largest;</span><br><span class="line">                       <span class="keyword">if</span> (left + <span class="number">1</span> &lt; heapsize &amp;&amp; arr[left + <span class="number">1</span>] &gt; arr[left])</span><br><span class="line">                              largest = left + <span class="number">1</span>;  <span class="comment">// 较大的子树</span></span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                              largest = left;</span><br><span class="line">                       <span class="keyword">if</span> (arr[largest] &lt; arr[index]) &#123;</span><br><span class="line">                              largest = index;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">if</span> (largest == index)<span class="comment">// 已经在堆顶了</span></span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                       swap(arr[largest], arr[index]);</span><br><span class="line">                       <span class="comment">//  交换根节点 与 最大儿子 的值，某个孩子比我大，那个孩子的位置就是largest</span></span><br><span class="line">                       index = largest;</span><br><span class="line">                       left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (arr.empty() == <span class="literal">true</span> || arr.size() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">                       heapInsert(arr, i);<span class="comment">//变成大根堆</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">int</span> heaplength = arr.size();</span><br><span class="line">               swap(arr[<span class="number">0</span>], arr[--heaplength]);</span><br><span class="line">               <span class="keyword">while</span> (heaplength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                       heapify(arr, <span class="number">0</span>, heaplength);</span><br><span class="line">                       swap(arr[<span class="number">0</span>], arr[--heaplength]);</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>4.选择排序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size()<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min_index = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ( arr[j] &lt; arr[min_index] ) &#123;</span><br><span class="line">                    min_index = arr[j] &lt; arr[min_index] ? j : min_index;</span><br><span class="line">                &#125;</span><br><span class="line">                swap(arr[j], arr[min_index]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>5.插入排序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (arr.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                                      swap(arr[j], arr[j + <span class="number">1</span>]);</span><br><span class="line">                              &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>6.冒泡排序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123; <span class="comment">//优化版的的冒泡</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">                       <span class="keyword">bool</span> swap_flag = <span class="literal">false</span>;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> j = arr.size()<span class="number">-1</span>; j &gt; i; j--) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (arr[j<span class="number">-1</span>] &gt; arr[j]) &#123;</span><br><span class="line">                                      swap(arr[j], arr[j <span class="number">-1</span>]);</span><br><span class="line">                                      swap_flag = <span class="literal">true</span>;</span><br><span class="line">                              &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">if</span> (!swap_flag) &#123;</span><br><span class="line">                              <span class="keyword">return</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//也可以这样, 大数往后面提</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.size()-i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                                      swap(arr[j], arr[j +<span class="number">1</span> ]);</span><br><span class="line">                              &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>7.基数排序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**求数据的最大位数,决定排序次数*/</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxbit</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">1</span>; <span class="comment">//保存最大的位数</span></span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(data[i] &gt;= p)</span><br><span class="line">            &#123;</span><br><span class="line">                p *= <span class="number">10</span>;</span><br><span class="line">                ++d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">radixsort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> n)</span> <span class="comment">//基数排序</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d = maxbit(data, n);</span><br><span class="line">        <span class="keyword">int</span> tmp[n];</span><br><span class="line">        <span class="keyword">int</span> count[<span class="number">10</span>]; <span class="comment">//计数器</span></span><br><span class="line">        <span class="keyword">int</span> i, j, k;</span><br><span class="line">        <span class="keyword">int</span> radix = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= d; i++) <span class="comment">//进行d次排序</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">                count[j] = <span class="number">0</span>; <span class="comment">//每次分配前清空计数器</span></span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                k = (data[j] / radix) % <span class="number">10</span>; <span class="comment">//统计每个桶中的记录数</span></span><br><span class="line">                count[k]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//计算累加频数，用户计数排序</span></span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">                count[j] = count[j - <span class="number">1</span>] + count[j];</span><br><span class="line">            <span class="keyword">for</span>(j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) <span class="comment">//将所有桶中记录依次收集到tmp中</span></span><br><span class="line">            &#123;</span><br><span class="line">                k = (data[j] / radix) % <span class="number">10</span>;</span><br><span class="line">                tmp[count[k] - <span class="number">1</span>] = data[j]; <span class="comment">//将tmp中的位置依次分配给每个桶</span></span><br><span class="line">                count[k]--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++) <span class="comment">//将临时数组的内容复制到data中</span></span><br><span class="line">                data[j] = tmp[j];</span><br><span class="line">            radix = radix * <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>8.桶排序</strong></p><p>（这里写了python版的，感觉更加简洁）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">假设待排序的一组数统一的分布在一个范围中，并将这一范围划分成几个子范围，也就是桶</span></span><br><span class="line"><span class="string">将待排序的一组数，分档规入这些子桶，并将桶中的数据进行排序</span></span><br><span class="line"><span class="string">将各个桶中的数据有序的合并起来</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bucket_sort</span>(<span class="params">nums,n=<span class="number">3</span></span>):</span></span><br><span class="line">    max_value = <span class="built_in">max</span>(nums)</span><br><span class="line">    min_value = <span class="built_in">min</span>(nums)</span><br><span class="line">    <span class="comment">## 桶的个数</span></span><br><span class="line">    bucket_count = <span class="built_in">int</span>((max_value-min_value)/n) + <span class="number">1</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">### 创建数量为桶个数的空列表</span></span><br><span class="line">    buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(bucket_count)]</span><br><span class="line">     </span><br><span class="line">    <span class="comment">## 将原数组的元素放入到每个桶中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        bucket_index = <span class="built_in">int</span>((i - min_value) // bucket_count)</span><br><span class="line">        buckets[bucket_index].append(i)</span><br><span class="line">    <span class="comment">## 创建返回的排序数组</span></span><br><span class="line">    sort_nums = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets)):</span><br><span class="line">        <span class="comment">##对每个桶中的元素进行排序</span></span><br><span class="line">        buckets[j].sort()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets[j])):</span><br><span class="line">            sort_nums.append(buckets[j][i])</span><br><span class="line">    <span class="keyword">return</span> sort_nums</span><br></pre></td></tr></table></figure><p>总结： <code>重点掌握快排，归并，堆排</code>。 </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍常用的排序方法——&lt;strong&gt;快速排序，归并排序，堆排序，选择排序，插入排序，冒泡排序，基数排序，桶排序&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/r0LJhR&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/21/r0LJhR.png&quot; alt=&quot;r0LJhR.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="编程题" scheme="http://lqzizzl.github.io/categories/%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    
    
    <category term="排序" scheme="http://lqzizzl.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="c++" scheme="http://lqzizzl.github.io/tags/c/"/>
    
  </entry>
  
</feed>
