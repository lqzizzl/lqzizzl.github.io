<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘强的博客</title>
  <icon>https://www.gravatar.com/avatar/dd49790798d9b05aa9a6471cd2b458c4</icon>
  <subtitle>脚踏实地，仰望星空</subtitle>
  <link href="https://lqzizzl.github.io/atom.xml" rel="self"/>
  
  <link href="https://lqzizzl.github.io/"/>
  <updated>2020-12-19T11:08:21.505Z</updated>
  <id>https://lqzizzl.github.io/</id>
  
  <author>
    <name>E-Dreamer</name>
    <email>lqzizzl@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>八大排序</title>
    <link href="https://lqzizzl.github.io/2020/12/19/%E2%80%98%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E2%80%99/"/>
    <id>https://lqzizzl.github.io/2020/12/19/%E2%80%98%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E2%80%99/</id>
    <published>2020-12-19T03:14:52.000Z</published>
    <updated>2020-12-19T11:08:21.505Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍常用的排序方法——<strong>快速排序，归并排序，堆排序，选择排序，插入排序，冒泡排序，基数排序，桶排序</strong>。</p><p><img src="https://img2020.cnblogs.com/blog/1456376/202005/1456376-20200525171545345-1333149883.png" alt="img"></p><p> <strong>1.快速排序</strong></p><p><strong>核心：</strong> partition 过程， 一个大于区和一个小于区和一个划分值，最初的划分值为数组的最后一位，小于区指针最初为 l-1，大于区指针为r。 </p><p><strong>逻辑：</strong> 1.当前值小于划分值时， 将小于区的下一位和当前值交换，小于区向右扩一个位置（less++）, 当前值跳下一个位置（l++）。</p><p>　　　 2.当前值大于划分值时， 将大于区的前一位和当前值交换，大于区向左扩一个位置（more–）。</p><p>　　　 3. 当前值等于划分值时，当前值直接跳下一个位置（l++）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">partition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">int</span> less = l - <span class="number">1</span>;<span class="comment">// 向左扩 开始的位置</span></span><br><span class="line">               <span class="keyword">int</span> more = r;</span><br><span class="line">               <span class="keyword">int</span> s;</span><br><span class="line">               <span class="keyword">while</span> (l &lt; more) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (arr1[l] &lt; arr1[r]) &#123;</span><br><span class="line">                              <span class="comment">//该元素小于arr[r]，将之放置在小于区域</span></span><br><span class="line">                              <span class="comment">//放置方法：将该元素与小于区域的右边界的下一个元素（l+1）交换，</span></span><br><span class="line">                              <span class="comment">//然后将l指针与less指针后移 （当前数与小于区域后一个数交换</span></span><br><span class="line">                              ++less;</span><br><span class="line">                              s = arr1[less];  </span><br><span class="line">                              arr1[less] = arr1[l];</span><br><span class="line">                              arr1[l] = s;</span><br><span class="line">                              l++;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr1[l] &gt; arr1[r]) &#123;</span><br><span class="line">                              <span class="comment">//该元素大于arr[r]，将之放置在大于区域</span></span><br><span class="line">                              <span class="comment">//放置方法：将该元素与大于区域的左边界的下一个元素（more-1）交换，</span></span><br><span class="line">                              <span class="comment">//more指针前进，这便完成了大于区域的扩大</span></span><br><span class="line">                              --more;</span><br><span class="line">                              s = arr1[more];</span><br><span class="line">                              arr1[more] = arr1[l];</span><br><span class="line">                              arr1[l] = s;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> &#123;</span><br><span class="line">                              l++;  <span class="comment">//   如果相等就直接 将当前值跳到下一个</span></span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               swap(arr1[more], arr1[r]);</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">               p[<span class="number">0</span>] = less + <span class="number">1</span>;</span><br><span class="line">               p[<span class="number">1</span>] = more;</span><br><span class="line">               <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">SortProcess</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">                       swap(arr1[l + rand() % (r - l)], arr1[r]); <span class="comment">// 随机快排</span></span><br><span class="line">                       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p = partition(arr1, l, r);<span class="comment">//返回的是位置，小于值得右边和大于值得左边</span></span><br><span class="line">                       <span class="comment">//cout&lt;&lt; p.size()&lt;&lt;endl;</span></span><br><span class="line">                       SortProcess(arr1, l, p[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">                       SortProcess(arr1, p[<span class="number">1</span>] + <span class="number">1</span>, r);</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (arr1.empty() == <span class="literal">true</span> || arr1.size() &lt; <span class="number">2</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               SortProcess(arr1, <span class="number">0</span>, arr1.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2.归并排序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (arr.size() == <span class="number">0</span> || arr.size() &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">               SortProcess(arr, <span class="number">0</span>, arr.size()<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//归并排序主体过程</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">SortProcess</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (r == l) <span class="keyword">return</span>; <span class="comment">// 递归停止</span></span><br><span class="line">               <span class="keyword">int</span> mid = l + (r - l)/<span class="number">2</span>;</span><br><span class="line">               SortProcess(arr, l, mid);</span><br><span class="line">               SortProcess(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">               merge(arr, l, mid, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 合并过程</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">helper</span><span class="params">(r - l + <span class="number">1</span>)</span></span>; <span class="comment">// 辅助数组用来存放排序后的数组</span></span><br><span class="line">               <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">               <span class="comment">// 两个指针</span></span><br><span class="line">               <span class="keyword">int</span> p1 = l;</span><br><span class="line">               <span class="keyword">int</span> p2 = mid + <span class="number">1</span>;</span><br><span class="line">               <span class="keyword">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= r) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (arr[p1] &lt; arr[p2]) &#123;</span><br><span class="line">                              helper[i++] = arr[p1++];</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> &#123;</span><br><span class="line">                              helper[i++] = arr[p2++];</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">while</span> (p1 &lt;= mid) &#123;<span class="comment">// 注意这里可以等于</span></span><br><span class="line">                       helper[i++] = arr[p1++];</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">while</span> (p2 &lt;= r) &#123;</span><br><span class="line">                       helper[i++] = arr[p2++];</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 将辅助数组元素位置拷贝会arr</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; helper.size(); i++) &#123;</span><br><span class="line">                       arr[l + i] = helper[i];</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3.堆排序</strong></p><p>核心（这里直接说大根堆）：</p><p>heapinsert() : 将数组元素加入大根堆，即建立大根堆过程。 </p><p>heapify() : 大根堆中有值发生变化，调整大根堆过程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 建立大根堆</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">heapInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; <span class="built_in">array</span>, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">while</span> (<span class="built_in">array</span>[index] &gt; <span class="built_in">array</span>[(index - <span class="number">1</span>) / <span class="number">2</span>]) &#123;</span><br><span class="line">                       swap(<span class="built_in">array</span>[index], <span class="built_in">array</span>[(index - <span class="number">1</span>) / <span class="number">2</span>]);<span class="comment">// (index - 1) / 2 是 根节点， index是儿子</span></span><br><span class="line">                       index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//大跟堆中有值发生变化，调整成依旧是大根堆</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> index, <span class="keyword">int</span> heapsize)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">int</span> left = index * <span class="number">2</span> + <span class="number">1</span>;<span class="comment">//左孩子节点</span></span><br><span class="line">               <span class="keyword">while</span> (left &lt; heapsize) &#123;</span><br><span class="line">                       <span class="keyword">int</span> largest;</span><br><span class="line">                       <span class="keyword">if</span> (left + <span class="number">1</span> &lt; heapsize &amp;&amp; arr[left + <span class="number">1</span>] &gt; arr[left])</span><br><span class="line">                              largest = left + <span class="number">1</span>;  <span class="comment">// 较大的子树</span></span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                              largest = left;</span><br><span class="line">                       <span class="keyword">if</span> (arr[largest] &lt; arr[index]) &#123;</span><br><span class="line">                              largest = index;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">if</span> (largest == index)<span class="comment">// 已经在堆顶了</span></span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                       swap(arr[largest], arr[index]);</span><br><span class="line">                       <span class="comment">//  交换根节点 与 最大儿子 的值，某个孩子比我大，那个孩子的位置就是largest</span></span><br><span class="line">                       index = largest;</span><br><span class="line">                       left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (arr.empty() == <span class="literal">true</span> || arr.size() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">                       heapInsert(arr, i);<span class="comment">//变成大根堆</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">int</span> heaplength = arr.size();</span><br><span class="line">               swap(arr[<span class="number">0</span>], arr[--heaplength]);</span><br><span class="line">               <span class="keyword">while</span> (heaplength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                       heapify(arr, <span class="number">0</span>, heaplength);</span><br><span class="line">                       swap(arr[<span class="number">0</span>], arr[--heaplength]);</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>4.选择排序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size()<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min_index = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ( arr[j] &lt; arr[min_index] ) &#123;</span><br><span class="line">                    min_index = arr[j] &lt; arr[min_index] ? j : min_index;</span><br><span class="line">                &#125;</span><br><span class="line">                swap(arr[j], arr[min_index]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>5.插入排序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (arr.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                                      swap(arr[j], arr[j + <span class="number">1</span>]);</span><br><span class="line">                              &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>6.冒泡排序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123; <span class="comment">//优化版的的冒泡</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">                       <span class="keyword">bool</span> swap_flag = <span class="literal">false</span>;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> j = arr.size()<span class="number">-1</span>; j &gt; i; j--) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (arr[j<span class="number">-1</span>] &gt; arr[j]) &#123;</span><br><span class="line">                                      swap(arr[j], arr[j <span class="number">-1</span>]);</span><br><span class="line">                                      swap_flag = <span class="literal">true</span>;</span><br><span class="line">                              &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">if</span> (!swap_flag) &#123;</span><br><span class="line">                              <span class="keyword">return</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//也可以这样, 大数往后面提</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.size()-i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                                      swap(arr[j], arr[j +<span class="number">1</span> ]);</span><br><span class="line">                              &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">generateRandomArr</span><span class="params">(<span class="keyword">int</span> maxsize, <span class="keyword">int</span> minsize, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">               <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(length)</span></span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                       arr[i] = rand() % (maxsize - minsize) + minsize + <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>7.基数排序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**求数据的最大位数,决定排序次数*/</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxbit</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">1</span>; <span class="comment">//保存最大的位数</span></span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(data[i] &gt;= p)</span><br><span class="line">            &#123;</span><br><span class="line">                p *= <span class="number">10</span>;</span><br><span class="line">                ++d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">radixsort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> n)</span> <span class="comment">//基数排序</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d = maxbit(data, n);</span><br><span class="line">        <span class="keyword">int</span> tmp[n];</span><br><span class="line">        <span class="keyword">int</span> count[<span class="number">10</span>]; <span class="comment">//计数器</span></span><br><span class="line">        <span class="keyword">int</span> i, j, k;</span><br><span class="line">        <span class="keyword">int</span> radix = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= d; i++) <span class="comment">//进行d次排序</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">                count[j] = <span class="number">0</span>; <span class="comment">//每次分配前清空计数器</span></span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                k = (data[j] / radix) % <span class="number">10</span>; <span class="comment">//统计每个桶中的记录数</span></span><br><span class="line">                count[k]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//计算累加频数，用户计数排序</span></span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">                count[j] = count[j - <span class="number">1</span>] + count[j];</span><br><span class="line">            <span class="keyword">for</span>(j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) <span class="comment">//将所有桶中记录依次收集到tmp中</span></span><br><span class="line">            &#123;</span><br><span class="line">                k = (data[j] / radix) % <span class="number">10</span>;</span><br><span class="line">                tmp[count[k] - <span class="number">1</span>] = data[j]; <span class="comment">//将tmp中的位置依次分配给每个桶</span></span><br><span class="line">                count[k]--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++) <span class="comment">//将临时数组的内容复制到data中</span></span><br><span class="line">                data[j] = tmp[j];</span><br><span class="line">            radix = radix * <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>8.桶排序</strong></p><p>（这里写了python版的，感觉更加简洁）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">假设待排序的一组数统一的分布在一个范围中，并将这一范围划分成几个子范围，也就是桶</span></span><br><span class="line"><span class="string">将待排序的一组数，分档规入这些子桶，并将桶中的数据进行排序</span></span><br><span class="line"><span class="string">将各个桶中的数据有序的合并起来</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bucket_sort</span>(<span class="params">nums,n=<span class="number">3</span></span>):</span></span><br><span class="line">    max_value = <span class="built_in">max</span>(nums)</span><br><span class="line">    min_value = <span class="built_in">min</span>(nums)</span><br><span class="line">    <span class="comment">## 桶的个数</span></span><br><span class="line">    bucket_count = <span class="built_in">int</span>((max_value-min_value)/n) + <span class="number">1</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">### 创建数量为桶个数的空列表</span></span><br><span class="line">    buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(bucket_count)]</span><br><span class="line">     </span><br><span class="line">    <span class="comment">## 将原数组的元素放入到每个桶中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        bucket_index = <span class="built_in">int</span>((i - min_value) // bucket_count)</span><br><span class="line">        buckets[bucket_index].append(i)</span><br><span class="line">    <span class="comment">## 创建返回的排序数组</span></span><br><span class="line">    sort_nums = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets)):</span><br><span class="line">        <span class="comment">##对每个桶中的元素进行排序</span></span><br><span class="line">        buckets[j].sort()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets[j])):</span><br><span class="line">            sort_nums.append(buckets[j][i])</span><br><span class="line">    <span class="keyword">return</span> sort_nums</span><br></pre></td></tr></table></figure><p>总结： <code>重点掌握快排，归并，堆排</code>。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文主要介绍常用的排序方法——&lt;strong&gt;快速排序，归并排序，堆排序，选择排序，插入排序，冒泡排序，基数排序，桶排序&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1456376/202005/1</summary>
      
    
    
    
    <category term="编程题" scheme="https://lqzizzl.github.io/categories/%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    
    
    <category term="排序" scheme="https://lqzizzl.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="c++" scheme="https://lqzizzl.github.io/tags/c/"/>
    
  </entry>
  
</feed>
